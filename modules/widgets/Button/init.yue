awful     = require("awful")
gears     = require("gears")
wibox     = require("wibox")
ruled     = require("ruled")
beautiful = require("beautiful")
menubar   = require("menubar")
naughty   = require("naughty")

import Object, util, wrap from require("modules.lib")
import FrozenObjectMutationException from require("modules.lib.exception")

--class Button extends wrap.GearsObject(wibox.container.background(), "wibox.container.background")
class Button extends wrap.GearsObject(wibox.widget {
	widget: wibox.container.background
}, "wibox.widget")
	init: (...) =>
		util.gen_properties(@, { "on_click" })

		@bg = "#FFFFFF00"
		@__private.pressed = false
		@__private.below_cursor = false

		@connect_signal("mouse::enter", () ->
			@bg = "#FFFFFF20"
			@__private.below_cursor = true
		)

		@connect_signal("mouse::leave", () ->
			@bg = "#FFFFFF00"
			@__private.below_cursor = false
		)

		@connect_signal("button::press", (_, _, _, button) ->
			@bg = "#FFFFFF40"
			@__private.pressed = true
		)

		@connect_signal("button::release", (_, _, _, button) ->
			@bg = "#FFFFFF20"

			if @__private.pressed and @__private.below_cursor
				@on_click(button)

			@__private.pressed = false
		)
		--[[

		local a, b
		a = gears.timer {
			timeout: 0.5
			autostart: false
			single_shot: true
			callback: () ->
				@set_bg "#00FF00"
				b::start()
		}

		b = gears.timer {
			timeout: 0.5
			autostart: true
			single_shot: true
			callback: () ->
				@set_bg "#0000FF"
				a::start()
		}
		--]]

	<tostring>: => "<Widget '#{@@__name}' instance>"

	<index>: (key) =>
		if type(key) != "string" or not rawget(@, "__properties")
			if getter = rawget(@, "__get")
				return getter(@, key)

			return rawget(@, key)

		if getter = rawget(@, "get_" .. key)
			return getter(@)

		if getter = rawget(@, "__get")
			return getter(@, key)

		getmetatable(@)[key]

	<newindex>: (key, value) =>
		if @__private?.frozen
			FrozenObjectMutationException()::raise()

		if type(key) != "string" or not rawget(@, "__properties")
			if setter = rawget(@, "__set")
				setter(@, key, value)
				return

			rawset(@, key, value)
			return

		if setter = rawget(@, "set_" .. key)
			setter(@, value)
			return

		if setter = rawget(@, "__set")
			setter(@, key, value)
			return

		rawset(@, key, value)
