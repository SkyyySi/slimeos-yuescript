---------------------------------------------------------------------------
-- A layout that allows its children to take more space than what's available
-- in the surrounding container. If the content does exceed the available
-- size, a scrollbar is added and scrolling behavior enabled.
--
--@DOC_wibox_layout_defaults_overflow_EXAMPLE@
-- @author Lucas Schwiderski
-- @copyright 2021 Lucas Schwiderski
-- @layoutmod wibox.layout.overflow
-- @supermodule wibox.layout.fixed
---------------------------------------------------------------------------

local *

base = require("wibox.widget.base")
fixed = require("wibox.layout.fixed")
separator = require("wibox.widget.separator")
gtable = require("gears.table")
gshape = require("gears.shape")
gobject = require("gears.object")
mousegrabber = mousegrabber

util = require("slimeos.lib.util")

defaults = {
	shape: gshape.rounded_bar,
	width: util.scale(5)
}

-- Determine the required space to draw the layout's children and, if necessary,
-- the scrollbar.
export fit = (context, orig_width, orig_height) =>
	widgets = @_private.widgets
	num_widgets = #widgets

	if num_widgets < 1
		return 0, 0

	width, height = orig_width, orig_height
	scrollbar_width = @_private.scrollbar_width
	scrollbar_enabled = @_private.scrollbar_enabled
	used_in_dir, used_max = 0, 0
	is_vertical = @_private.dir == "vertical"
	avail_in_dir = if is_vertical
		orig_height
	else
		orig_width

	-- Set the direction covered by scrolling to the maximum value
	-- to allow widgets to take as much space as they want.
	if is_vertical
		height = math.huge
	else
		width = math.huge

	-- First, determine widget sizes.
	-- Only when the content doesn't fit and needs scrolling should
	-- we reduce content size to make space for a scrollbar.
	for _, widget in ipairs(widgets)
		w, h = base.fit_widget(self, context, widget, width, height)

		if is_vertical
			used_max = math.max(used_max, w)
			used_in_dir = used_in_dir + h
		else
			used_max = math.max(used_max, h)
			used_in_dir = used_in_dir + w

	spacing = @_private.spacing * (num_widgets - 1)
	used_in_dir = used_in_dir + spacing

	need_scrollbar = (scrollbar_enabled) and (used_in_dir > avail_in_dir)

	-- Even if `used_max == orig_(width|height)` already, `base.fit_widget`
	-- will clamp return values, so we can "overextend" here.
	if need_scrollbar
		used_max = used_max + scrollbar_width

	if is_vertical
		used_max, used_in_dir
	else
		used_in_dir, used_max

-- Layout children, scrollbar and spacing widgets.
-- Only those widgets that are currently visible will be placed.
export layout = (context, orig_width, orig_height) =>
	result = {}
	is_vertical = @_private.dir == "vertical"
	widgets = @_private.widgets
	avail_in_dir = if is_vertical
		orig_height
	else
		orig_width
	scrollbar_width = @_private.scrollbar_width
	scrollbar_enabled = @_private.scrollbar_enabled
	scrollbar_position = @_private.scrollbar_position
	width, height = orig_width, orig_height
	widget_x, widget_y = 0, 0
	used_in_dir, used_max = 0, 0

	-- Set the direction covered by scrolling to the maximum value
	-- to allow widgets to take as much space as they want.
	if is_vertical
		height = math.huge
	else
		width = math.huge

	-- First, determine widget sizes.
	-- Only when the content doesn't fit and needs scrolling should
	-- we reduce content size to make space for a scrollbar.
	for _, widget in pairs(widgets)
		w, h = base.fit_widget(self, context, widget, width, height)

		if is_vertical
			used_max = math.max(used_max, w)
			used_in_dir = used_in_dir + h
		else
			used_max = math.max(used_max, h)
			used_in_dir = used_in_dir + w

	used_in_dir = used_in_dir + (@_private.spacing * (#widgets-1))

	-- Save size for scrolling behavior
	@_private.avail_in_dir = avail_in_dir
	@_private.used_in_dir = used_in_dir

	need_scrollbar = (used_in_dir > avail_in_dir) and scrollbar_enabled

	scroll_position = @_private.scroll_factor

	if need_scrollbar
		scrollbar_widget = @_private.scrollbar_widget
		bar_x, bar_y = 0, 0
		local bar_w, bar_h

		-- The percentage of how much of the content can be visible within
		-- the available space
		visible_percent = avail_in_dir / used_in_dir

		-- Make scrollbar length reflect `visible_percent`
		-- TODO: Apply a default minimum length
		bar_length = math.floor(visible_percent * avail_in_dir)
		bar_pos = (avail_in_dir - bar_length) * @_private.scroll_factor

		if is_vertical
			bar_w, bar_h = base.fit_widget(self, context, scrollbar_widget, scrollbar_width, bar_length)
			bar_y = bar_pos

			switch scrollbar_position
				when "left"
					widget_x = widget_x + bar_w
				when "right"
					bar_x = orig_width - bar_w

			@_private.bar_length = bar_h

			width = width - bar_w
		else
			bar_w, bar_h = base.fit_widget(self, context, scrollbar_widget, bar_length, scrollbar_width)
			bar_x = bar_pos

			switch scrollbar_position
				when "top"
					widget_y = widget_y + bar_h
				when "bottom"
					bar_y = orig_height - bar_h

			@_private.bar_length = bar_w

			height = height - bar_h

		table.insert(result, base.place_widget_at(
			scrollbar_widget,
			math.floor(bar_x),
			math.floor(bar_y),
			math.floor(bar_w),
			math.floor(bar_h)
		))

	pos, spacing = 0, @_private.spacing
	interval = used_in_dir - avail_in_dir

	spacing_widget = @_private.spacing_widget

	if spacing_widget
		if is_vertical
			_, spacing = base.fit_widget(self, context, spacing_widget, width, spacing)
		else
			spacing = base.fit_widget(self, context, spacing_widget, spacing, height)

	for i, w in ipairs(widgets)
		local content_x, content_y
		content_w, content_h = base.fit_widget(self, context, w, width, height)

		-- When scrolling down, the content itself moves up -> substract
		scrolled_pos = pos - (scroll_position * interval)

		-- Stop processing completely once we're passed the visible portion
		if scrolled_pos > avail_in_dir
			break

		if is_vertical
			content_x, content_y = widget_x, scrolled_pos
			pos = pos + content_h + spacing

			if @_private.fill_space
				content_w = width
		else
			content_x, content_y = scrolled_pos, widget_y
			pos = pos + content_w + spacing

			if @_private.fill_space
				content_h = height

		is_in_view = scrolled_pos + if is_vertical
			content_h > 0
		else
			content_w > 0

		if is_in_view
			-- Add the spacing widget, but not before the first widget
			if i > 1 and spacing_widget
				table.insert(result, base.place_widget_at(
					spacing_widget,
					-- The way how spacing is added for regular widgets
					-- and the `spacing_widget` is disconnected:
					-- The offset for regular widgets is added to `pos` one
					-- iteration _before_ the one where the widget is actually
					-- placed.
					-- Because of that, the placement for the spacing widget
					-- needs to substract that offset to be placed right after
					-- the previous regular widget.
					math.floor(is_vertical and content_x or (content_x - spacing)),
					math.floor(is_vertical and (content_y - spacing) or content_y),
					math.floor(is_vertical and content_w or spacing),
					math.floor(is_vertical and spacing or content_h)
				))

			table.insert(result, base.place_widget_at(
				w,
				math.floor(content_x),
				math.floor(content_y),
				math.floor(content_w),
				math.floor(content_h)
			))

	return result

export before_draw_children = (_, cr, width, height) =>
	-- Clip drawing for children to the space we're allowed to draw in
	cr::rectangle(0, 0, width, height)
	cr::clip()


--- The amount of units to advance per scroll event.
--
-- This affects calls to `scroll` and the default mouse wheel handler.
--
-- The default is `10`.
--
-- @property step
-- @tparam number step The step size.
export set_step = (step) =>
	@_private.step = step
	-- We don't need to emit enything here, since changing step only really
	-- takes effect the next time the user scrolls


--- Scroll the layout's content by `amount * step`.
--
-- A positive amount scrolls down/right, a negative amount scrolls up/left.
--
-- The amount of units scrolled is affected by `step`.
--
-- @method overflow:scroll
-- @tparam number amount The amount to scroll by.
-- @emits property::overflow::scroll_factor
-- @emitstparam property::overflow::scroll_factor number scroll_factor The new
--   scroll factor.
-- @emits widget::layout_changed
-- @emits widget::redraw_needed
export scroll = (amount) =>
	if amount == 0
		return

	interval = @_private.used_in_dir
	delta = @_private.step / interval

	factor = @_private.scroll_factor + (delta * amount)
	@set_scroll_factor(factor)


--- The scroll factor.
--
-- The scroll factor represents how far the layout's content is currently
-- scrolled. It is represented as a fraction from `0` to `1`, where `0` is the
-- start of the content and `1` is the end.
--
-- @property scroll_factor
-- @tparam number scroll_factor The scroll factor.
-- @propemits true false

export set_scroll_factor = (factor) =>
	current = @_private.scroll_factor
	interval = @_private.used_in_dir - @_private.avail_in_dir
	if (current == factor) or
		-- the content takes less space than what is available, i.e. everything
		-- is already visible
		(interval <= 0) or
		-- the scroll factor is out of range
		(current <= 0 and factor < 0) or
		(current >= 1 and factor > 1)
		return

	@_private.scroll_factor = math.min(1, math.max(factor, 0))

	@emit_signal("widget::layout_changed")
	@emit_signal("property::scroll_factor", factor)

export get_scroll_factor = () =>
	return @_private.scroll_factor


--- The scrollbar width.
--
-- For horizontal scrollbars, this is the scrollbar height
--
-- The default is `5`.
--
--@DOC_wibox_layout_overflow_scrollbar_width_EXAMPLE@
--
-- @property scrollbar_width
-- @tparam number scrollbar_width The scrollbar width.
-- @propemits true false

export set_scrollbar_width = (width) =>
	if @_private.scrollbar_width == width
		return

	@_private.scrollbar_width = width

	@emit_signal("widget::layout_changed")
	@emit_signal("property::scrollbar_width", width)


--- The scrollbar position.
--
-- For horizontal scrollbars, this can be `"top"` or `"bottom"`,
-- for vertical scrollbars this can be `"left"` or `"right"`.
-- The default is `"right"`/`"bottom"`.
--
--@DOC_wibox_layout_overflow_scrollbar_position_EXAMPLE@
--
-- @property scrollbar_position
-- @tparam string scrollbar_position The scrollbar position.
-- @propemits true false

export set_scrollbar_position = (position) =>
	if @_private.scrollbar_position == position
		return

	@_private.scrollbar_position = position

	@emit_signal("widget::layout_changed")
	@emit_signal("property::scrollbar_position", position)

export get_scrollbar_position = () =>
	return @_private.scrollbar_position


--- The scrollbar visibility.
--
-- If this is set to `false`, no scrollbar will be rendered, even if the layout's
-- content overflows. Mouse wheel scrolling will work regardless.
--
-- The default is `true`.
--
-- @property scrollbar_enabled
-- @tparam boolean scrollbar_enabled The scrollbar visibility.
-- @propemits true false

export set_scrollbar_enabled = (enabled) =>
	if @_private.scrollbar_enabled == enabled
		return

	@_private.scrollbar_enabled = enabled

	@emit_signal("widget::layout_changed")
	@emit_signal("property::scrollbar_enabled", enabled)

export get_scrollbar_enabled = () =>
	return @_private.scrollbar_enabled

-- Wraps a callback function for `mousegrabber` that is capable of
-- updating the scroll factor.
build_grabber = (container, initial_x, initial_y, geo) ->
	is_vertical = container._private.dir == "vertical"
	bar_interval = container._private.avail_in_dir - container._private.bar_length
	start_pos = container._private.scroll_factor * bar_interval
	start = is_vertical and initial_y or initial_x

	-- Calculate a matrix transforming from screen coordinates into widget
	-- coordinates.
	-- This is required for mouse movement to work when the widget has been
	-- transformed by something like `wibox.container.rotate`.
	matrix_from_device = geo.hierarchy::get_matrix_from_device()
	wgeo = geo.drawable.drawable::geometry()
	matrix = matrix_from_device::translate(-wgeo.x, -wgeo.y)

	return (mouse) ->
		if not mouse.buttons[1]
			return false

		x, y = matrix::transform_point(mouse.x, mouse.y)
		pos = is_vertical and y or x
		container::set_scroll_factor((start_pos + (pos - start)) / bar_interval)

		return true

-- Applies a mouse button signal using `build_grabber` to a scrollbar widget.
apply_scrollbar_mouse_signal = (container, w) ->
	w::connect_signal("button::press", (_, x, y, button_id, _, geo) ->
		if button_id != 1
			return
		mousegrabber.run(build_grabber(container, x, y, geo), "fleur")
	)


--- The scrollbar widget.
-- This widget is rendered as the scrollbar element.
--
-- The default is `wibox.widget.separator{ shape = gears.shape.shape }`.
--
--@DOC_wibox_layout_overflow_scrollbar_widget_EXAMPLE@
--
-- @property scrollbar_widget
-- @tparam widget scrollbar_widget The scrollbar widget.
-- @propemits true false

export set_scrollbar_widget = (widget) =>
	w = base.make_widget_from_value(widget)

	apply_scrollbar_mouse_signal(self, w)

	@_private.scrollbar_widget = w

	@emit_signal("widget::layout_changed")
	@emit_signal("property::scrollbar_widget", widget)

export get_scrollbar_widget = () =>
	@_private.scrollbar_widget

export reset = () =>
	@_private.widgets = {}
	@_private.scroll_factor = 0

	scrollbar_widget = separator {
		shape: defaults.shape
	}

	apply_scrollbar_mouse_signal(self, scrollbar_widget)
	@_private.scrollbar_widget = scrollbar_widget

	@emit_signal("widget::layout_changed")
	@emit_signal("widget::reset")
	@emit_signal("widget::reseted")

new = (dir, ...) ->
	result = fixed[dir](...)

	gtable.crush(result, overflow, true)
	result.widget_name = gobject.modulename(2)
	-- Tell the widget system to prevent clicks outside the layout's extends
	-- to register with child widgets, even if they actually extend that far.
	-- This prevents triggering button presses on hidden/clipped widgets.
	result.clip_child_extends = true

	with result._private
		-- Manually set the scroll factor here. We don't know the bounding size yet.
		.scroll_factor = 0

		-- Apply defaults. Bypass setters to avoid signals.
		.step = 10
		.fill_space = true
		.scrollbar_width = 5
		.scrollbar_enabled = true
		.scrollbar_position = if dir == "vertical"
			"right"
		else
			"bottom"

	scrollbar_widget = separator {
		shape: defaults.shape
	}

	apply_scrollbar_mouse_signal(result, scrollbar_widget)
	result._private.scrollbar_widget = scrollbar_widget

	result::connect_signal("button::press", (_, _, button) =>
		switch button
			when 4
				self::scroll(-1)
			when 5
				self::scroll(1)
	)

	result


--- Returns a new horizontal overflow layout.
-- Child widgets are placed similar to `wibox.layout.fixed`, except that
-- they may take as much width as they want. If the total width of all child
-- widgets exceeds the width available whithin the layout's outer container
-- a scrollbar will be added and scrolling behavior enabled.
-- @tparam widget ... Widgets that should be added to the layout.
-- @constructorfct wibox.layout.overflow.horizontal
export horizontal = (...) ->
	new("horizontal", ...)


--- Returns a new vertical overflow layout.
-- Child widgets are placed similar to `wibox.layout.fixed`, except that
-- they may take as much height as they want. If the total height of all child
-- widgets exceeds the height available whithin the layout's outer container
-- a scrollbar will be added and scrolling behavior enabled.
-- @tparam widget ... Widgets that should be added to the layout.
-- @constructorfct wibox.layout.overflow.vertical
export vertical = (...) ->
	new("vertical", ...)
