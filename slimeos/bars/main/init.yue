import awful, wibox, gears, beautiful from require("awesome_std")
import util from require("slimeos.lib")
import List, Tuple from require("slimeos.lib.collection")
import main_menu from require("slimeos.boxes")
layouts = require("slimeos.layouts")

unpack = unpack or table.unpack

(args={}) ->
	s = args.screen

	-- A factor used to allow for per-screen scaling
	s.scaling_factor = 1

	s.main_menu = args.menu ?? main_menu {
		terminal: args.terminal ?? os.getenv("TERMINAL") ?? "xterm"
	}

	-- Each screen has its own tag table.
	awful.tag(List([ tostring(i) for i = 1, 10 ]), s, awful.layout.layouts[1])

	-- Create a promptbox for each screen
	s.promptbox = awful.widget.prompt()

	-- Create an imagebox widget which will contain an icon indicating which layout we're using.
	-- We need one layoutbox per screen.
	s.layoutbox = awful.widget.layoutbox {
		screen:  s
		buttons: {
			awful.button(Tuple({}), 1, () -> awful.layout.inc( 1))
			awful.button(Tuple({}), 3, () -> awful.layout.inc(-1))
			awful.button(Tuple({}), 4, () -> awful.layout.inc(-1))
			awful.button(Tuple({}), 5, () -> awful.layout.inc( 1))
		}
	}

	-- Create the main bar
	s.main_wibar = awful.wibar {
		position: "top"
		screen:   s
		bg:       gears.color.transparent
	}

	do
		local previous_cursor, previous_wibox
		-- Create a taglist widget
		s.taglist = awful.widget.taglist {
			screen:  s
			filter:  awful.widget.taglist.filter.all
			layout:  {
				layout:  wibox.layout.flex.horizontal
			}
			widget_template: {
				{
					id:     "text_role"
					halign: "center"
					valign: "center"
					forced_width: s.main_wibar.height ?? util.scale(12)
					widget: wibox.widget.textbox
				}
				id:     "background_role"
				widget: wibox.container.background
				create_callback: (current_tag, index, objects) =>
					@connect_signal("mouse::enter", () ->
						@bg = beautiful.fg_normal ?? "#FFFAF4"
						@fg = beautiful.bg_normal ?? "#131522"

						wb = mouse.current_wibox ?? {}
						previous_cursor, previous_wibox = wb.cursor, wb
						wb.cursor = "hand1"
					)

					@connect_signal("mouse::leave", () ->
						if current_tag.selected
							@bg = beautiful.taglist_bg_focus ?? beautiful.bg_focus ?? "#008EF9"
						elseif current_tag.urgent
							@bg = beautiful.taglist_bg_urgent ?? beautiful.bg_urgent ?? "#FF000F"
						elseif current_tag.occupied
							@bg = beautiful.taglist_bg_occupied ?? beautiful.bg_minimize ?? "#444444"
						elseif current_tag.volatile
							@bg = beautiful.taglist_bg_volatile ?? beautiful.border_color_marked ?? "#FFB900"
						else
							@bg = beautiful.taglist_bg_empty ?? beautiful.bg_normal ?? "#131522"

						@fg = beautiful.fg_normal ?? "#FFFAF4"

						if previous_wibox
							previous_wibox.cursor = previous_cursor
							previous_wibox = nil
					)
			}
			buttons: {
				awful.button(Tuple({}), 1, (t) -> t::view_only())
				awful.button(Tuple({ modkey }), 1, (t) ->
					if client.focus
						client.focus::move_to_tag(client.focus, t)
				)
				awful.button(Tuple({}), 3, awful.tag.viewtoggle)
				awful.button(Tuple({ modkey }), 3, (t) ->
					if client.focus
						client.focus::toggle_tag(t)
				)
				awful.button(Tuple({}), 4, (t) -> awful.tag.viewprev(t.screen))
				awful.button(Tuple({}), 5, (t) -> awful.tag.viewnext(t.screen))
			}
		}

	-- Create a tasklist widget
	s.tasklist = awful.widget.tasklist {
		screen:  s
		filter:  awful.widget.tasklist.filter.currenttags
		layout: {
			layout: wibox.layout.flex.horizontal
		}
		widget_template: {
			{
				{
					id:     "icon_role"
					widget: wibox.widget.imagebox
				}
				margins: util.scale(4)
				widget:  wibox.container.margin
			}
			id:     "background_role"
			widget: wibox.container.background
		}
		buttons: {
			awful.button(Tuple({}), 1, (c) -> c::activate {
				context: "tasklist"
				action:  "toggle_minimization"
			})
			awful.button(Tuple({}), 3, () -> awful.menu.client_list {
				theme: {
					width: util.scale(250)
				}
			})
			awful.button(Tuple({}), 4, () -> awful.client.focus.byidx(-1))
			awful.button(Tuple({}), 5, () -> awful.client.focus.byidx( 1))
		}
	}

	main_wibar_buttons = buttons: {
		awful.button(Tuple({}), 3, () -> s.main_menu::toggle())
		awful.button(Tuple({}), 4, awful.tag.viewprev)
		awful.button(Tuple({}), 5, awful.tag.viewnext)
	}

	s.launcher = awful.widget.launcher {
		image: beautiful.awesome_icon
		menu:  s.main_menu
	}

	s.main_wibar.widget = layouts.absolute_center(
		{
			{
				{
					{
						s.launcher
						s.taglist
						s.promptbox
						layout: wibox.layout.fixed.horizontal
					}
					bg:     beautiful.bg_normal
					shape:  util.shape(gears.shape.partially_rounded_rect, false, false, true, false, util.scale(10))
					widget: wibox.container.background
				}
				right: util.scale(1)
				bottom: util.scale(1)
				widget:  wibox.container.margin
			}
			bg:     beautiful.fg_normal
			shape:  util.shape(gears.shape.partially_rounded_rect, false, false, true, false, util.scale(10))
			widget: wibox.container.background
		}, {
			{
				{
					s.tasklist
					bg:     beautiful.bg_normal
					shape:  util.shape(gears.shape.partially_rounded_rect, false, false, true, true, util.scale(10))
					widget: wibox.container.background
				}
				id:     "tasklist_border_role"
				right: util.scale(1)
				bottom: util.scale(1)
				left: util.scale(1)
				widget:  wibox.container.margin
			}
			bg:     beautiful.fg_normal
			shape:  util.shape(gears.shape.partially_rounded_rect, false, false, true, true, util.scale(10))
			widget: wibox.container.background
		}, {
			{
				{
					{
						awful.widget.keyboardlayout()
						wibox.widget.systray()
						wibox.widget.textclock()
						s.layoutbox
						layout: wibox.layout.fixed.horizontal
					}
					bg:     beautiful.bg_normal
					shape:  util.shape(gears.shape.partially_rounded_rect, false, false, false, true, util.scale(10))
					widget: wibox.container.background
				}
				bottom: util.scale(1)
				left: util.scale(1)
				widget:  wibox.container.margin
			}
			bg:     beautiful.fg_normal
			shape:  util.shape(gears.shape.partially_rounded_rect, false, false, false, true, util.scale(10))
			widget: wibox.container.background
		}, main_wibar_buttons
	)

	s.update_dock_tasklist_separator = () =>
		border_width = if #@clients > 0
			util.scale(1)
		else
			0

		util.for_children(@main_wibar, "tasklist_border_role", (child) ->
			with child
				.right = border_width
				.bottom = border_width
				.left = border_width
		)

	s::update_dock_tasklist_separator()

	s.on_bar_refresh = (callback) =>
		for tag in *s.tags
			tag::connect_signal("property::selected", callback)
		s::connect_signal("property::clients", callback)
		client.connect_signal(  "manage", callback)
		client.connect_signal("unmanage", callback)

	s::on_bar_refresh(() -> s::update_dock_tasklist_separator())
