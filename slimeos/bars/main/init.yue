require = require
os = os
tostring = tostring

import awful, wibox, gears, beautiful from require("awesome_std")
import util from require("slimeos.lib")
import main_menu from require("slimeos.boxes")
layouts = require("slimeos.layouts")

import "slimeos.widgets.SystemCenter"
import "slimeos.boxes.launcher"
import "slimeos.widgets.Button"
button_bg_normal   = beautiful.button_bg_normal   ?? beautiful.bg_alternate ?? "#131522"
button_bg_active   = beautiful.button_bg_active   ?? "#1D2034"
button_bg_selected = beautiful.button_bg_selected ?? "#252941"
button_bg_press    = beautiful.button_bg_press    ?? "#303654"

gen_shape = (tl, tr, br, bl) ->
	(cr, w, h) ->
		gears.shape.partially_rounded_rect(cr, w, h, tl, tr, br, bl, util.scale(10))

section_shapes = {
	left:   gen_shape(false, false, true,  false)
	center: gen_shape(false, false, true,  true)
	right:  gen_shape(false, false, false, true)
}

--section_margins = {
--	left:   {                      bottom: util.scale(1), right: util.scale(1) }
--	center: { left: util.scale(1), bottom: util.scale(1), right: util.scale(1) }
--	right:  { left: util.scale(1), bottom: util.scale(1) }
--}

sidebar_icon_open   = beautiful.icons.Sidebar
sidebar_icon_closed = beautiful.icons.SidebarOutline

wrap_section = (side, widget) ->
	--{
	--	{
	--		{
	--			widget
	--			bg:     beautiful.bg_normal
	--			shape:  section_shapes[side]
	--			widget: wibox.container.background
	--		}
	--		margins: section_margins[side]
	--		widget:  wibox.container.margin
	--	}
	--	bg:     beautiful.fg_normal
	--	shape:  section_shapes[side]
	--	widget: wibox.container.background
	--}

	wibox.widget {
		{
			widget: widget
		}
		id:     "background_role"
		bg:     beautiful.wibar_bg_normal or beautiful.bg_normal
		shape:  section_shapes[side]
		widget: wibox.container.background
	}

export.<call> = (_, args={}) ->
	s = args.screen

	-- A factor used to allow for per-screen scaling
	s.scaling_factor = 1

	s.main_menu = args.menu ?? main_menu {
		terminal: args.terminal ?? os.getenv("TERMINAL") ?? "xterm"
	}

	-- Each screen has its own tag table.
	awful.tag([tostring(i) for i = 1, 10], s, awful.layout.layouts[1])

	-- Create a promptbox for each screen
	s.promptbox = awful.widget.prompt()

	-- Create an imagebox widget which will contain an icon indicating which layout we're using.
	-- We need one layoutbox per screen.
	s.layoutbox = awful.widget.layoutbox {
		screen:  s
		buttons: {
			awful.button({}, 1, (() -> awful.layout.inc( 1)))
			awful.button({}, 3, (() -> awful.layout.inc(-1)))
			awful.button({}, 4, (() -> awful.layout.inc(-1)))
			awful.button({}, 5, (() -> awful.layout.inc( 1)))
		}
	}

	-- Create the main bar
	s.main_wibar = awful.wibar {
		position: "top"
		screen:   s
		bg:       gears.color.transparent
	}

	--- System center
	s.system_center = SystemCenter {
		position: "right"
		screen:   s
	}

	s.system_center::hide()

	sidebar_toggle_widget = wibox.widget {
		{
			id:     "image_role"
			image:  sidebar_icon_closed
			widget: wibox.widget.imagebox
		}
		id:          "button_role"
		bg:          button_bg_normal
		bg_normal:   button_bg_normal
		bg_active:   button_bg_active
		bg_selected: button_bg_selected
		bg_press:    button_bg_press
		buttons:     {
			awful.button({}, 1, nil, (() -> s.system_center::toggle()))
		}
		widget: Button
	}

	s.system_center::connect_signal("property::visible", () =>
		icon = if @visible
			sidebar_icon_open
		else
			sidebar_icon_closed

		util.for_children(sidebar_toggle_widget, "image_role", (child) ->
			child.image = icon
		)
	)

	-- TODO: Make this be provided from rc.yue
	modkey = "Mod4"

	-- Create a taglist widget
	s.taglist = awful.widget.taglist {
		screen:  s
		filter:  awful.widget.taglist.filter.all
		layout:  {
			layout:  wibox.layout.flex.horizontal
		}
		widget_template: {
			{
				id:     "text_role"
				halign: "center"
				valign: "center"
				forced_width: s.main_wibar.height ?? util.scale(12)
				widget: wibox.widget.textbox
			}
			id:     "background_role"
			widget: wibox.container.background
			create_callback: (current_tag, index, objects) =>
				@connect_signal("mouse::enter", () ->
					@bg = beautiful.fg_normal ?? "#FFFAF4"
					@fg = beautiful.bg_normal ?? "#131522"
				)

				@connect_signal("mouse::leave", () ->
					@bg = if current_tag.selected
						beautiful.taglist_bg_focus ?? beautiful.bg_focus ?? "#008EF9"
					elseif current_tag.urgent
						beautiful.taglist_bg_urgent ?? beautiful.bg_urgent ?? "#FF000F"
					elseif (#current_tag::clients()) > 0
						beautiful.taglist_bg_occupied ?? beautiful.bg_minimize ?? "#444444"
					elseif current_tag.volatile
						beautiful.taglist_bg_volatile ?? beautiful.border_color_marked ?? "#FFB900"
					else
						beautiful.taglist_bg_empty ?? beautiful.bg_normal ?? "#131522"

					@fg = beautiful.fg_normal ?? "#FFFAF4"
				)
		}
		buttons: {
			awful.button({}, 1, nil, ((t) -> t::view_only()))
			awful.button({ modkey }, 1, nil, ((t) ->
				if client.focus
					client.focus::move_to_tag(client.focus, t)
			))
			awful.button({}, 3, nil, (() -> awful.tag.viewtoggle()))
			awful.button({ modkey }, 3, ((t) ->
				if client.focus
					client.focus::toggle_tag(t)
			))
			awful.button({}, 4, ((t) -> awful.tag.viewprev(t.screen)))
			awful.button({}, 5, ((t) -> awful.tag.viewnext(t.screen)))
		}
	}

	-- Create a tasklist widget
	s.tasklist = awful.widget.tasklist {
		screen:  s
		filter:  awful.widget.tasklist.filter.currenttags
		layout: {
			layout: wibox.layout.flex.horizontal
		}
		widget_template: {
			{
				{
					id:     "icon_role"
					image:  beautiful.fallback_icon
					widget: wibox.widget.imagebox
				}
				margins: util.scale(4)
				widget:  wibox.container.margin
			}
			id:     "background_role"
			widget: wibox.container.background
		}
		buttons: {
			awful.button({}, 1, ((c) -> c::activate {
				context: "tasklist"
				action:  "toggle_minimization"
			}))
			awful.button({}, 3, (() -> awful.menu.client_list {
				theme: {
					width: util.scale(250)
				}
			}))
			awful.button({}, 4, () -> awful.client.focus.byidx(-1))
			awful.button({}, 5, () -> awful.client.focus.byidx( 1))
		}
	}

	s.launcher = launcher {
		screen: s
	}

	s.main_wibar_sections = {
		left: wrap_section("left", wibox.widget {
			s.launcher.toggle_button
			s.taglist
			s.promptbox
			layout: wibox.layout.fixed.horizontal
		})
		center: wrap_section("center", wibox.widget {
			s.tasklist
			layout: wibox.layout.fixed.horizontal
		})
		right: wrap_section("right", wibox.widget {
			{
				awful.widget.keyboardlayout()
				wibox.widget.systray()
				wibox.widget.textclock()
				s.layoutbox
				sidebar_toggle_widget
				layout: wibox.layout.fixed.horizontal
			}
			margins: util.scale(4)
			widget:  wibox.container.margin
		})
	}

	s.main_wibar.widget = wibox.widget {
		layouts.absolute_center(
			s.main_wibar_sections.left,
			s.main_wibar_sections.center,
			s.main_wibar_sections.right,
			{
				awful.button({}, 3, () -> s.main_menu::toggle())
				awful.button({}, 4, () -> awful.tag.viewprev(s))
				awful.button({}, 5, () -> awful.tag.viewnext(s))
			}
		)
		id:     "background_role"
		widget: wibox.container.background
	}

	s.on_bar_refresh = (callback) =>
		callback_noargs = () -> callback()

		for tag in *@tags
			tag::connect_signal("property::selected", callback_noargs)

		@connect_signal("property::clients", callback_noargs)
		with cc = client.connect_signal
			cc(  "manage", callback_noargs)
			cc("unmanage", callback_noargs)
			cc("property::fullscreen", callback_noargs)
			cc("property::maximized",  callback_noargs)
			cc("property::minimized",  callback_noargs)
			cc("property::hidden",     callback_noargs)

	s::on_bar_refresh(() ->
		util.apcall ->
			has_maximized_client = false

			for c in *s.clients
				if (not (c.hidden or c.minimized)) and (c.maximized or c.fullscreen)
					has_maximized_client = true
					break

			section_bg = if has_maximized_client
				gears.shape.transparent
			else
				beautiful.wibar_bg_normal or beautiful.bg_normal

			for _, widget in pairs(s.main_wibar_sections)
				util.for_children(widget, "shape_role", (child) ->
					child.bg = section_bg
				)

			wibar_bg = if has_maximized_client
				beautiful.wibar_bg_normal or beautiful.bg_normal
			else
				gears.shape.transparent

			util.for_children(s.main_wibar.widget, "background_role", (child) ->
				child.bg = wibar_bg
			)

		gears.timer {
			timeout:     0.01
			autostart:   true
			single_shot: true
			callback:    () ->
				c = mouse.current_client

				if not c
					return

				c::activate {
					context: "mouse_enter"
					raise:   false
				}
		}
	)

	--[[
	s.update_dock_tasklist_separator = () =>
		border_width = if #@clients > 0
			util.scale(1)
		else
			0

		util.for_children(@main_wibar.widget, "tasklist_border_role", (child) ->
			with child
				.right = border_width
				.bottom = border_width
				.left = border_width
		)

	s::update_dock_tasklist_separator()

	s::on_bar_refresh(() -> s::update_dock_tasklist_separator())
	--]]
