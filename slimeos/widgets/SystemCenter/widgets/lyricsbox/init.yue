-- TODO: Rework this widget to use the global "playerctl::metadat" signal
--       instead of making it run `playerctl` itself

require  = require
io       = io
os       = os
math     = math
string   = string
tostring = tostring
tonumber = tonumber
dofile   = dofile
pcall    = pcall
xpcall   = xpcall
pairs    = pairs
ipairs   = ipairs
next     = next
select   = select
print    = print
getmetatable = getmetatable
setmetatable = setmetatable

awesome = awesome

import "awful"
import "gears"
import "wibox"
import "beautiful"

import util, LRC, exception from require("slimeos.lib")
import MissingParameterException from exception

config_path_shell_safe = "#{gears.filesystem.get_configuration_dir()::gsub([[']], [['"'"']])}"

lyrics_dir = os.getenv("HOME") .. "/Music"

do
	file = io.popen("xdg-user-dir MUSIC")

	if file
		lyrics_dir = file::read("*a")::gsub("\n", "")
		file::close()
	elseif xdg_music_home = os.getenv("XDG_MUSIC_HOME")
		lyrics_dir = xdg_music_home

lyrics_dir = lyrics_dir .. "/lyrics"

cache_file = lyrics_dir .. "/.song_id_cache.lua"

_, song_cache = try
	{ data: dofile(io.read(cache_file, "r+")) }
catch err
	{}

song_cache.data ??= {}

format_string_for_saving = (str) ->
	str = str
		::gsub("\\", [[\\]])
		::gsub("\a", [[\a]])
		::gsub("\b", [[\b]])
		::gsub("\f", [[\f]])
		::gsub("\n", [[\n]])
		::gsub("\r", [[\r]])
		::gsub("\t", [[\t]])
		::gsub("\v", [[\v]])
		::gsub("\"", [[\"]])
		::gsub("\127", "\\127") -- DEL / delete key

	--- See: https://www.asciitable.com/
	for i = 1, 26
		c = string.char(i)
		str = str::gsub(c, "\\#{i}")

	for i = 28, 31
		c = string.char(i)
		str = str::gsub(c, "\\#{i}")

	str

song_cache.<> = {
	clear: () =>
		for k, _ in pairs(@data)
			@[k] = nil

		@

	merge: (other) =>
		for k, v in pairs(other)
			@data[k] = v

		@

	reload: () =>
		try
			reloaded_cache = dofile(cache_file)

			@clear()

			@merge(reloaded_cache)
		catch err
			print("ERROR: #{err}")

		@

	__tostring: () =>
		file_content = "return {\n"

		for k, v in pairs(@data)
			file_content ..= "\t[\"#{format_string_for_saving(k)}\"] = \"#{format_string_for_saving(v)}\",\n"

		file_content .. "}\n"

	save: () =>
		util.protected_open(cache_file, "w", (file) ->
			file::write(tostring(@))
		)

		@

	get: (k) =>
		@data[k]

	set: (k, v) =>
		@data[k] = v

		@
}
song_cache.<>.__index = song_cache.<>

song_cache::reload()

lyricsbox = wibox.widget {
	nil
	{
		{
			{
				id:     "previous_line_role"
				font:   "Sans Bold " .. tostring(math.floor(util.scale(12) + 0.5))
				halign: "center"
				valign: "center"
				widget: wibox.widget.textbox
			}
			fg:     "#CCC8C3"
			widget: wibox.container.background
		}
		{
			id:     "current_line_role"
			font:   "Sans Bold " .. tostring(math.floor(util.scale(16) + 0.5))
			halign: "center"
			valign: "center"
			widget: wibox.widget.textbox
		}
		{
			{
				id:     "next_line_role"
				font:   "Sans Bold " .. tostring(math.floor(util.scale(12) + 0.5))
				halign: "center"
				valign: "center"
				widget: wibox.widget.textbox
			}
			fg:     "#CCC8C3"
			widget: wibox.container.background
		}
		layout: wibox.layout.flex.vertical
	}
	layout: wibox.layout.align.vertical
}

lyricsbox.clear = () =>
	util.for_children(@, "previous_line_role", (child) -> child.text = "")
	util.for_children(@, "current_line_role",  (child) -> child.text = "")
	util.for_children(@, "next_line_role",     (child) -> child.text = "")
	@_previous_line = ""

lyricsbox.push = (line="", next_line="") =>
	util.for_children(@, "previous_line_role", (child) -> child.text = @_previous_line or "")
	util.for_children(@, "current_line_role",  (child) -> child.text = line)
	util.for_children(@, "next_line_role",     (child) -> child.text = next_line)
	@_previous_line = line

get_lyrics = (song_id, callback) ->
	MissingParameterException()::assert(song_id,  1, "get_lyrics", "song_id")
	MissingParameterException()::assert(callback, 2, "get_lyrics", "callback")
	script = [[
	cd ~/syrics &&
	source venv/bin/activate &&
	syrics ]] ..
		"--directory '#{lyrics_dir::gsub([[']], [['"'"']])}' " ..
		"--config '#{config_path_shell_safe}/config/syrics/config.json' " .. -- This flag seems to be ignored...
		"'https://open.spotify.com/track/#{song_id}'"

	awful.spawn.easy_async({ "bash", "-c", script }, (stdout, stderr, reason, exit_code) ->
		if exit_code != 0
			return

		lyrics = LRC.LRCData::from_file("#{lyrics_dir}/#{song_id}.lrc")

		if not lyrics
			return

		callback(lyrics)
	)

get_song_id = (song_title, callback) ->
	MissingParameterException()::assert(song_title, 1, "get_song_id", "song_title")
	MissingParameterException()::assert(callback,   2, "get_song_id", "callback")

	do
		id = song_cache::get(song_title)

		if id != nil
			print("\027[1;34mINFO\027[0;1m:\027[0m Found cached id '#{id}' for song '#{song_title}'")
			callback(id)
			return

	script = [[
	cd ~/syrics &&
	source venv/bin/activate &&]] ..
		"'#{config_path_shell_safe}/config/syrics/search_song_id.py' " ..
		"'#{config_path_shell_safe}/config/syrics/config.json' " ..
		"'#{song_title::gsub([[']], [['"'"']])}'"
	
	awful.spawn.easy_async({ "bash", "-c", script }, (stdout, stderr, reason, exit_code) ->
		if exit_code != 0
			return

		song_id = util.string.strip(stdout or "")

		if not song_id or song_id == ""
			--print("Could not find a song_id")
			return

		song_cache::set(song_title, song_id)::save()
		callback(song_id)
	)

trim_song_fmt = (song_fmt) ->
	song_fmt
		--::gsub("%(.*%)", "")
		::gsub("%{.*%}", "")
		::gsub("%[.*%]", "")
		|> util.string.strip()

format_title = (title) ->
	title
		::gsub("%(feat.*%)", "")
		::gsub("feat.*", "")
		::gsub("%(ft.*%)", "")
		::gsub("ft.*", "")
		|> util.string.strip()

format_artists = (artists) ->
	artists
		::gsub(" and ",   ", ")
		::gsub(" und ",   ", ") -- German "and"
		::gsub(" [&Xx] ", ", ")
		::gsub(" - Topic", "") -- YouTube likes to add this sometimes for some reason.
		::gsub("%s*-$", "")
		::gsub("%(feat.*%)", "")
		::gsub("feat.*", "")
		::gsub("%(ft.*%)", "")
		::gsub("ft.*", "")
		|> util.string.strip()

local prev_song
local prev_timer
local last_line_key

gears.timer {
	timeout:   3
	autostart: true
	call_now:  true
	callback:  () ->
		awesome.connect_signal("playerctl::metadata", (metadata) ->
			song = trim_song_fmt("track:#{format_title(metadata.title)} AND artist:#{format_artists(metadata.artist)}")

			if song == prev_song
				--print("Lyrics Error: The song has not changed")
				return

			--print(song)

			lyricsbox::clear()

			prev_song = song

			if prev_timer
				prev_timer::stop()
				prev_timer = nil

			get_song_id(song, (song_id) -> get_lyrics(song_id, (lyrics, data) ->
				print("\027[1;34mINFO\027[0;1m:\027[0m Showing lyrics for: '#{format_artists(metadata.artist)} - #{metadata.title}' [#{song_id}]")

				prev_timer = gears.timer {
					timeout:   0.1
					autostart: true
					call_now:  true
					callback:  () ->
						awful.spawn.easy_async({ "playerctl", "metadata", "--format", "{{position}}" }, (position, _, _, exit_code_position) ->
							if exit_code_position > 0
								print("Lyrics Error: `exit_code_position` is not `0`")
								return

							player_position_in_microseconds = tonumber(position)

							if player_position_in_microseconds < 100
								--- Sometimes, instead of reporting nothing, playerctl reports seemingly random values.
								--- These appear to never be above 100 or so. Since we're dealing with microseconds, anyway,
								--- there's not much loss in just skipping any position-pull with a number that small
								--- being reported - at most, you'd start seeing synced lyrics a 10th of a second later.
								return

							if not player_position_in_microseconds
								print("Lyrics Error: `player_position_in_microseconds` is `nil`")
								return

							player_position_in_seconds = (player_position_in_microseconds / 1_000_000) + ((lyrics.meta.offset or 0) / 1_000) + 0.2

							do
								local next_line

								for k, line in ipairs(lyrics.lines)
									next_line = select(2, next(lyrics.lines, k))

									if not (next_line or line).position
										return

									if (k != last_line_key) and
											((next_line or line).position::tonumber() > player_position_in_seconds) and
											(player_position_in_seconds >= line.position::tonumber())
										lyricsbox::push(line.text, next_line.text)
										last_line_key = k
										break
						)
				}
			))
		)
}

lyricsbox
