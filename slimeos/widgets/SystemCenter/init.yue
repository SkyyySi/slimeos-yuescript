-- TODO: Move this into slimeos.boxes or slimeos.bars

import awful, gears, wibox, ruled, beautiful, menubar, naughty from require("awesome_std")

import util from require("slimeos.lib")

import "slimeos.widgets.Button"

import "lgi"
import Gio from lgi
Gtk = lgi.require("Gtk", "3.0")

getmetatable = getmetatable
setmetatable = setmetatable
rawget = rawget
rawset = rawset
unpack = unpack or table.unpack

base_spacing       = beautiful.SystemCenter_base_spacing    or util.scale(10)
button_bg_normal   = beautiful.SystemCenter_Tab_bg_normal   or beautiful.bg_alternate or "#131522"
button_bg_active   = beautiful.SystemCenter_Tab_bg_active   or "#1D2034"
button_bg_selected = beautiful.SystemCenter_Tab_bg_selected or "#252941"
button_bg_press    = beautiful.SystemCenter_Tab_bg_press    or "#303654"

custom_rounded_rect = (cr, width, height, tl, tr, br, bl) ->
    --if width / 2 < rad then
    --    rad = width / 2

    --if height / 2 < rad then
    --    rad = height / 2

    cr::new_sub_path()

    -- Top left
    if tl then
        cr::arc(tl, tl, tl, math.pi, 3*(math.pi/2))
    else
        cr::move_to(0,0)

    -- Top right
    if tr then
        cr::arc(width-tr, tr, tr, 3*(math.pi/2), math.pi*2)
    else
        cr::line_to(width, 0)

    -- Bottom right
    if br then
        cr::arc(width-br, height-br, br, math.pi*2, math.pi/2)
    else
        cr::line_to(width, height)

    -- Bottom left
    if bl then
        cr::arc(bl, height-bl, bl, math.pi/2, math.pi)
    else
        cr::line_to(0, height)

    cr::close_path()

macro RUN_IF_CHANGED = (old, new, fn) ->
	"if #{new} != #{old} then #{fn}"


shape = (base_shape, ...) ->
	args = { ... }
	(cr, width, height) -> base_shape(cr, width, height, unpack(args))


wrap_tab_block = (widget, center=true) ->
	wibox.widget {
		{
			nil
			{
				widget
				margins: base_spacing
				widget:  wibox.container.margin
			}
			expand: center and "outside" or "inside"
			layout: wibox.layout.align.horizontal
		}
		bg:     beautiful.bg_alternate
		shape:  shape(gears.shape.rounded_rect, util.scale(10))
		widget: wibox.container.background
	}


wrap_tab_body = (blocks) ->
	wibox.widget {
		nil
		blocks
		layout: wibox.layout.align.vertical
	}


builtin_tabs = {}

player_icon_cache = {}
lookup_icon_for_player_name = (player_name) ->
	do
		icon = player_icon_cache[player_name]

		if icon != nil
			return icon

	app_desktop_id = Gio.DesktopAppInfo.search(player_name)?[1]?[1]

	if app_desktop_id == nil
		return

	icon_path = Gtk
		.IconTheme?
		.get_default()?
		::lookup_by_gicon(
			Gio.DesktopAppInfo.new(app_desktop_id)?::get_icon(), 48, 0
		)?::get_filename()

	if icon_path == nil
		return

	icon = gears.color.recolor_image(icon_path, beautiful.color.black)

	player_icon_cache[player_name] = icon

	icon


multimedia_remote_control_button = (args) ->
	button = wibox.widget {
		{
			{
				{
					id:     "image_role"
					image:  args.icon
					halign: "center"
					valign: "center"
					forced_height: util.scale(25)
					widget: wibox.widget.imagebox
				}
				margins: base_spacing / 2
				widget:  wibox.container.margin
			}
			bg:          button_bg_active
			bg_normal:   button_bg_active
			bg_selected: button_bg_selected
			bg_press:    button_bg_press
			buttons: {
				awful.button({}, 1, nil, args.action)
			}
			widget: Button
		}
		shape:  shape(gears.shape.rounded_rect, util.scale(2.5))
		widget: wibox.container.background
	}

	if args.icon_updater
		args.icon_updater(button)

	if args.text_updater
		args.text_updater(button)

	button

multimedia_remote_controls = () ->
	title = wibox.widget {
		id:     "text_role"
		font:   beautiful.font .. " Bold"
		widget: wibox.widget.textbox
	}

	artist = wibox.widget {
		id:     "text_role"
		widget: wibox.widget.textbox
	}

	coverart = wibox.widget {
		{
			{
				{
					{
						id:     "image_role"
						halign: "right"
						valign: "center"
						widget: wibox.widget.imagebox
					}
					forced_width:  util.scale(150)
					forced_height: util.scale(150)
					layout: wibox.layout.fixed.vertical
				}
				shape:  shape(gears.shape.rounded_rect, util.scale(10))
				border_width: util.scale(1)
				border_color: button_bg_selected
				widget: wibox.container.background
			}
			margins: base_spacing / 2
			widget:  wibox.container.margin
		}
		layout: wibox.layout.fixed.vertical
	}


	play_pause_button = multimedia_remote_control_button {
		icon: beautiful.icons.Play
		action: () -> awesome.emit_signal("playerctl::play-pause")
		icon_updater: () =>
			awesome.connect_signal("playerctl::metadata", (metadata) ->
				util.for_children(@, "image_role", (child) ->
					child.image = beautiful.icons[metadata.playing and "Pause" or "Play"]
				)
			)
	}


	progress_bar_shape = shape(gears.shape.rounded_rect, util.scale(10))
	progress_bar = wibox.widget {
		{
			id:               "progressbar_role"
			min_value:        0,
			max_value:        100,
			value:            0,
			color:            beautiful.bg_focus
			background_color: button_bg_selected
			forced_height:    util.scale(30),
			shape:            progress_bar_shape
			bar_shape:        progress_bar_shape
			widget:           wibox.widget.progressbar
		}
		margins: base_spacing / 2
		widget:  wibox.container.margin
	}


	previous_metadata = {}
	awesome.connect_signal("playerctl::metadata", (metadata) ->
		-- TODO: Switch back to using `$RUN_IF_CHANGED(old, new, fn)` instead of `if new != old then fn`
		-- after macros have been fixed.
		if previous_metadata.title      != metadata.title      then util.for_children(title,        "text_role",        (child) -> child.text  = metadata.title)
		if previous_metadata.artist     != metadata.artist     then util.for_children(artist,       "text_role",        (child) -> child.text  = metadata.artist)
		if previous_metadata.art_cairo  != metadata.art_cairo  then util.for_children(coverart,     "image_role",       (child) -> child.image = metadata.art_cairo)
		if previous_metadata.completion != metadata.completion then util.for_children(progress_bar, "progressbar_role", (child) -> child.value = metadata.completion)

		previous_metadata = {
			title:      metadata.title
			artist:     metadata.artist
			art_cairo:  metadata.art_cairo
			completion: metadata.completion
		}
	)


	current_player = wibox.widget {
		nil
		nil
		{
			nil
			nil
			{
				{
					{
						{
							{
								id:     "player_icon_role"
								widget: wibox.widget.imagebox
							}
							{
								id:     "player_name_role"
								widget: wibox.widget.textbox
							}
							spacing: base_spacing
							layout:  wibox.layout.fixed.horizontal
						}
						margins: base_spacing / 2
						widget:  wibox.container.margin
					}
					bg:     beautiful.color.green
					fg:     beautiful.color.black
					shape:  shape(gears.shape.rounded_rect, util.scale(10))
					forced_height: util.scale(30)
					widget: wibox.container.background
				}
				bottom: base_spacing
				widget: wibox.container.margin
			}
			layout: wibox.layout.align.horizontal
		}
		layout: wibox.layout.align.vertical
	}


	awesome.connect_signal("playerctl::active_player", (active_player) ->
		--print(">>> The currently active player is \027[1m'#{active_player}'\027[0m")

		if (not active_player) or (active_player == "")
			current_player.visible = false
			return
		else
			current_player.visible = true

		active_player_icon = lookup_icon_for_player_name(active_player)

		util.for_children(current_player, "player_icon_role", (child) ->
			child.image = active_player_icon
		)

		util.for_children(current_player, "player_name_role", (child) ->
			child.text = active_player or ""
		)
	)


	remote_control_buttons = wibox.widget {
		{
			{
				multimedia_remote_control_button {
					icon: beautiful.icons.RemoteNext
					action: () -> awesome.emit_signal("playerctl::previous")
				}
				reflection: {
					horizontal: true
				}
				widget: wibox.container.mirror
			}
			play_pause_button
			multimedia_remote_control_button {
				icon: beautiful.icons.RemoteNext
				action: () -> awesome.emit_signal("playerctl::next")
			}
			spacing: util.scale(2)
			layout:  wibox.layout.flex.horizontal
		}
		forced_height: util.scale(30)
		shape:  shape(gears.shape.rounded_rect, util.scale(10))
		widget: wibox.container.background
	}


	--wrap_tab_body(grid)
	wibox.widget {
		{
			nil
			{
				{
					{
						{
							title
							artist
							layout: wibox.layout.flex.vertical
						}
						strategy: "max"
						height:   util.scale(50)
						widget:   wibox.container.constraint
					}
					current_player
					remote_control_buttons
					layout: wibox.layout.align.vertical
				}
				margins: base_spacing / 2
				widget:  wibox.container.margin
			}
			coverart
			layout: wibox.layout.align.horizontal
		}
		progress_bar
		layout: wibox.layout.fixed.vertical
	}


import cava, lyricsbox, volume_control, stable_diffusion, notification_center from require("slimeos.widgets.SystemCenter.widgets")

global __SYSTEMCENTER_CAVA_INSTANCE = __SYSTEMCENTER_CAVA_INSTANCE ?? cava()

builtin_tabs.multimedia = () ->
	wibox.widget {
		wrap_tab_block(multimedia_remote_controls())
		{
			forced_height: util.scale(200)
			widget: wrap_tab_block(lyricsbox)
		}
		wrap_tab_block(wibox.widget {
			volume_control
			height:   util.scale(30)
			strategy: "max"
			widget:   wibox.container.constraint
		})
		wrap_tab_block(wibox.widget {
			__SYSTEMCENTER_CAVA_INSTANCE
			height:   util.scale(300)
			strategy: "min"
			widget:   wibox.container.constraint
		})
		spacing: base_spacing
		layout:  wibox.layout.fixed.vertical
	}


builtin_tabs.widgets = { <>: {} }

builtin_tabs.widgets.clock = () ->
	date_worded = wibox.widget {
		font:    beautiful.apply_font_size(beautiful.base_font, util.scale(14))
		format:  "%A, %m. %B"
		halign:  "center"
		widget:  wibox.widget.textclock
	}

	time = wibox.widget {
		font:    beautiful.apply_font_size(beautiful.base_font, util.scale(20))
		format:  "<b>%H:%M:%S</b>"
		halign:  "center"
		refresh: 1
		widget:  wibox.widget.textclock
	}

	date_numeric = wibox.widget {
		font:    beautiful.apply_font_size(beautiful.base_font, util.scale(14))
		format:  "%d.%m.%Y"
		halign:  "center"
		widget:  wibox.widget.textclock
	}

	clock = wibox.widget {
		date_worded
		time
		date_numeric
		spacing: base_spacing / 2
		layout:  wibox.layout.fixed.vertical
	}

	clock

builtin_tabs.widgets.calendar = () ->
	styles = {
		margin: {
			left:  util.scale(2)
			right: util.scale(2)
		}
		padding: {
			left:  util.scale(8)
			right: util.scale(8)
		}
		shape:  shape(gears.shape.rounded_rect, util.scale(10))
	}

	styles.__index = styles

	styles.month = {
		--padding:      5
		--border_width: 2
	}

	styles.normal = {
	}

	styles.focus = {
		fg:      beautiful.fg_focus
		bg:      beautiful.bg_focus
		markup:  (text) -> "<b>#{text}</b>"
	}

	styles.header = {
		font:   beautiful.apply_font_size(beautiful.base_font, util.scale(22))
		markup: (text) -> "<b>#{text}</b>"
	}

	styles.weekday = {
		markup: (text) -> "<b>#{text}</b>"
	}

	styles.month.<>   = styles
	styles.normal.<>  = styles
	styles.focus.<>   = styles
	styles.header.<>  = styles
	styles.weekday.<> = styles

	styles.padding ??= {}
	styles.margin ??= {}

	decorate_cell = (widget, flag, date) ->
		---@cast flag "month"|"normal"|"focus"|"header"|"weekday"
		style = styles[flag] ?? {}

		for prop_name in *({ "ellipsize", "wrap", "valign", "halign", "font", "line_spacing_factor", "justify", "indent" })
			if style[prop_name] != nil
				widget[prop_name] = style[prop_name]

		if style.markup and widget.get_text and widget.set_markup then
			widget.markup = style.markup(widget.text)

		styled_calendar = wibox.widget {
			{
				{
					widget
					top:     style.padding.top    or styles.padding.top
					bottom:  style.padding.bottom or styles.padding.bottom
					left:    style.padding.left   or styles.padding.left
					right:   style.padding.right  or styles.padding.right
					widget:  wibox.container.margin
				}
				bg: style.bg
				bg_normal: style.bg_normal or style.bg or button_bg_normal
				bg_active: style.bg_active or button_bg_active
				bg_selected: style.bg_selected or button_bg_selected
				bg_press: style.bg_press or button_bg_press
				fg: style.fg
				shape: style.shape
				border_width: style.border_width
				border_color: style.border_color
				border_strategy: style.border_strategy
				bgimage: style.bgimage
				opacity: style.opacity
				visible: style.visible
				widget: (flag != "month") and Button or wibox.container.background
			}
			forced_height: style.forced_height
			forced_width: style.forced_width
			top:    style.margin.top    or styles.margin.top
			bottom: style.margin.bottom or styles.margin.bottom
			left:   style.margin.left   or styles.margin.left
			right:  style.margin.right  or styles.margin.right
			widget:  wibox.container.margin
		}

		styled_calendar

	calendar = wibox.widget {
		date:     os.date("*t")
		font:     beautiful.monospace_font
		fn_embed: decorate_cell
		widget:   wibox.widget.calendar.month
	}

	calendar

builtin_tabs.widgets.notification_center = () ->
	widget = wibox.widget {}

	widget

generation_already_run = false
builtin_tabs.stable_diffusion = () ->
	widget = stable_diffusion()

	--[[
	if not generation_already_run
		generation_already_run = true

		gears.timer {
			timeout:     2
			autostart:   true
			single_shot: true
			callback:    () ->
				<- util.apcall!
				notify("Generating image!")
				widget::generate(stable_diffusion.test_data)
		}
	--]]

	widget

--wibox {
--	x:       20 + 1920
--	y:       20
--	width:   768
--	height:  768
--	visible: true
--	ontop:   true
--	widget:  {
--		builtin_tabs.widgets.stable_diffusion()
--		bg:     "#202020"
--		widget: wibox.container.background
--	}
--}

builtin_tabs.widgets.<call> = () =>
	widget = wibox.widget {
		--{
			wrap_tab_block(builtin_tabs.widgets.clock())
			wrap_tab_block(builtin_tabs.widgets.calendar())
			--wrap_tab_block(builtin_tabs.widgets.notification_center())
			spacing: base_spacing
			layout:  wibox.layout.fixed.vertical
		--}
		--{
		--	wrap_tab_block(builtin_tabs.widgets.stable_diffusion(), false)
		--	top:    base_spacing
		--	widget: wibox.container.margin
		--}
		--layout: wibox.layout.align.vertical
	}

	widget


Tab = (args, widget_template) ->
	local tab
	tab = wibox.widget(widget_template or {
		{
			{
				nil
				{
					{
						id:     "image_role"
						layout: wibox.widget.imagebox
					}
					{
						id:     "text_role"
						font:   beautiful.font .. " Bold"
						layout: wibox.widget.textbox
					}
					layout: wibox.layout.fixed.horizontal
				}
				expand: "outside"
				layout: wibox.layout.align.horizontal
			}
			id:          "button_role"
			bg:          gears.color.transparent
			bg_normal:   gears.color.transparent
			bg_selected: button_bg_selected
			bg_press:    button_bg_press
			widget: Button
		}
		id:     "background_role"
		bg:     button_bg_normal
		border_width: util.scale(1)
		widget: wibox.container.background
	})

	util.for_children(tab, "image_role", (child) ->
		child.image = args.image
	)

	util.for_children(tab, "text_role", (child) ->
		child.text = args.text
	)

	util.for_children(tab, "button_role", (child) ->
		child.buttons = {
			awful.button({}, 1, nil, () -> args.container::activate_tab(tab))
		}
	)

	tab.get_container = ()      => args.container
	tab.set_container = (value) => args.container = value

	tab.set_text = (value) =>
		util.for_children(@, "text_role", (child) -> child.text = value)

	tab.set_image = (value) =>
		util.for_children(@, "image_role", (child) -> child.image = value)

	tab.get_active = () => @_private.is_active_tab

	tab.set_active = (is_active) =>
		@_private.is_active_tab = is_active
		@set_tabbar_index()

		util.for_children(@, "background_role", (child) ->
			child.bg = (is_active and button_bg_active or button_bg_normal)
		)

	tab.set_tabbar_index = (index, tabbar_length) =>
		if index
			@_private.tabbar_index = index
		else
			index = @_private.tabbar_index

		if tabbar_length
			@_private.tabbar_length = tabbar_length
		else
			tabbar_length = @_private.tabbar_length

		if (not index) or (not tabbar_length)
			return

		is_active = @get_active()

		util.for_children(@, "background_role", (child) ->
			child.border_color = beautiful[is_active and "border_color_active" or "border_color_normal"]
			child.shape = if index == 1
				shape(custom_rounded_rect, util.scale( 10), util.scale(2.5), util.scale(2.5), util.scale( 10))
			elseif index == tabbar_length
				shape(custom_rounded_rect, util.scale(2.5), util.scale( 10), util.scale( 10), util.scale(2.5))
			else
				shape(gears.shape.rounded_rect, util.scale(2.5))
		)

	tab.get_body_widget = ()      => @_private.body_widget
	tab.set_body_widget = (value) => @_private.body_widget = value
	tab.body_widget = args.body_widget

	--if args.text != nil
	--	tab::set_text(args.text)

	--if args.image != nil
	--	tab::set_image(args.image)

	tab

TabbedLayout = () ->
	tabbed_layout = wibox.widget {
		{
			--{
				{
					id:      "all_tabs_role"
					spacing: util.scale(2)
					forced_height: util.scale(30)
					layout:  wibox.layout.flex.horizontal
				}
			--	shape:  shape(gears.shape.rounded_rect, util.scale(10))
			--	widget: wibox.container.background
			--}
			bottom: base_spacing
			widget: wibox.container.margin
		}
		{
			id:     "current_tab_role"
			layout: wibox.layout.align.horizontal
		}
		layout:  wibox.layout.align.vertical
	}

	tabbed_layout._private.tabs = {}

	tabbed_layout.activate_tab = (tab) =>
		for t in *@_private.tabs
			t.active = (t == tab)

		@_private.currently_active_tab = tab
		util.for_children(@, "current_tab_role", (child) -> child.second = tab.body_widget)

	--tabbed_layout::activate_tab(tabbed_layout._private.tabs[1])
	-- tabbed_layout.activate_tab = tabbed_layout._private.tabs[1]

	tabbed_layout.refresh = () =>
		tabs = @_private.tabs

		len = #(@_private.tabs)
		for i, t in ipairs(@_private.tabs)
			t::set_tabbar_index(i, len)

		util.for_children(@, "all_tabs_role", (child) ->
			child::reset()

			for index, tab in ipairs(tabs)
				child::add(tab)
		)

	tabbed_layout::refresh()

	tabbed_layout.add_tab = (args) =>
		tabs = @_private.tabs

		args.tab.container ??= @

		if not args.index
			tabs[] = args.tab
		elseif (args.overwrite) or (tabs[args.index] == nil)
			tabs[args.index] = args.tab
		else
			--- If the index is not at the end, we need to move all other tabs back first
			for i = #tabs, args.index, -1
				tabs[i + 1] = tabs[i]

			tabs[args.index] = args.tab

		if not @_private.currently_active_tab
			@_private.currently_active_tab = tabs[1]
			tabbed_layout::activate_tab(tabs[1])

		@refresh()

	tabbed_layout.remove_tab = (index) =>
		tabs = @_private.tabs

		if @_private.currently_active_tab == tabs[index]
			@_private.currently_active_tab = tabs[1]
		tabs[index] = nil
		tabbed_layout::refresh()

	tabbed_layout.switch_tab = (index) =>
		util.for_children(@, "all_tabs_role", (child) ->
			child.second = @_private.tabs[index]
		)

	tabbed_layout

get_shape_for_position = (position, corner_radius) ->
	corner_radius ??= beautiful.SystemCenter_corner_radius or util.scale(20)
	base_shape = (tl, tr, br, bl) -> (cr, w, h) -> gears.shape.partially_rounded_rect(cr, w, h, tl, tr, br, bl, corner_radius)

	switch position
		when "right"
			base_shape(true, false, false, true)
		when "left"
			base_shape(false, true, true, false)
		when "top"
			base_shape(false, false, true, true)
		when "bottom"
			base_shape(true, true, false, false)

import "slimeos.boxes.animated_wibox"
SystemCenter = (args={}) ->
	with args
		.position ??= "left"
		.width    ??= util.scale(400)
		.height   ??= args.screen.workarea.height
		.type     ??= "normal"
		.shape    ??= beautiful.SystemCenter_shape or get_shape_for_position(.position)
		.visible  ??= true
		.widget = wibox.widget {
			{
				{
					id:     "tabs_role"
					widget: TabbedLayout
				}
				margins: base_spacing
				widget:  wibox.container.margin
			}
			bg:     .bg or beautiful.SystemCenter_bg or beautiful.bg_normal or "#0E1019"
			shape:  .shape
			widget: wibox.container.background
		}
		.bg = gears.color.transparent

	system_center = animated_wibox {
		full_width: args.width
		full_height: args.screen.workarea.height
		container: awful.wibar
		container_args: args
	}

	--system_center = wibox(args)

	--awful.placement.right(system_center, {
	--	honor_workarea: true
	--})

	multimedia_tab = Tab {
		text:        "󰎈  Media"
		body_widget: builtin_tabs.multimedia()
	}

	system_tab = Tab {
		text:        "    System"
		body_widget: wibox.widget {
			text:   "This is the tab for system info!"
			widget: wibox.widget.textbox
		}
	}

	widgets_tab = Tab {
		text:        "󰜬   Widgets"
		body_widget: builtin_tabs.widgets()
	}

	stable_diffusion_tab = Tab {
		text:        "  SD"
		body_widget: wrap_tab_block(builtin_tabs.stable_diffusion(), false)
	}

	--[ [
	util.for_children(args.widget, "tabs_role", (child) ->
		child::add_tab { tab: stable_diffusion_tab }
		child::add_tab { tab: multimedia_tab }
		child::add_tab { tab: system_tab }
		child::add_tab { tab: widgets_tab }
		-- child::activate_tab(widgets_tab)
	)
	--]]

	system_center

SystemCenter
