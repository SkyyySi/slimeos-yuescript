awful     = require("awful")
gears     = require("gears")
wibox     = require("wibox")
ruled     = require("ruled")
beautiful = require("beautiful")
menubar   = require("menubar")
naughty   = require("naughty")

string = string
math   = math

color = {
	reset: "\027[0m"
	bold:  "\027[1m"
	blue:  "\027[34m"
}

export length = (str) ->
	-- Strip colors and formatting
	str = str::gsub("\027[^m]*m", "")

	-- Build-in utf8 modules from >=Lua5.3
	if utf8
		return utf8.len(str)

	-- 3rd party utf8 library
	if success, utf8 = try require("lua-utf8")
		return utf8.len(str)

	-- If no utf8 library is installed
	print("#{color.reset}#{color.blue}#{color.bold}INFO:#{color.reset} You have no utf8 library installed. Consider installing `luautf8`.")

	if #str < 1
		return 0

	i = 1
	i_utf = 0
	for j = 1, #str
		b = string.byte(str::sub(j, j))

		if b < 128
			i += 1
			i_utf = 0
			continue

		if i_utf > 3
			i_utf = 0
			i += 1
			continue

		i_utf += 1
	i

--- The `"" .. ` is there because we only need the first
--- retrun value of `::gsub
export strip = (str, char="%s") -> "" .. str::gsub("^#{char}+", "")::gsub("#{char}+$", "")

export split = (str, delimiter="%s") ->
	sections = {}

	do
		local i
		setmetatable(sections, {
			__call: () =>
				i, ret = next(self, i)
				ret
		})

	if not str::match(delimiter)
		sections[] = str
		return sections

	last_pos = 1

	for pos in str::gmatch("()#{delimiter}")
		section = str::sub(last_pos, pos - 1)

		if not section
			last_pos = pos + 1
			continue

		sections[] = section
		last_pos = pos + 1

	do
		section = str::sub(last_pos, length(str))

		if section and section != ""
			sections[] = section

	sections

--[[
--- Test for `split()`; should print:
---
--- ```
--- >>> [1]: 'foo'
--- >>> [2]: 'bar'
--- >>> [3]: ''
--- >>> [4]: ''
--- >>> [5]: 'biz'
--- >>> [6]: 'baz'
--- ```
with x = split("foo\nbar\n\n\nbiz\nbaz")
	for k, v in pairs(x)
		print(">>> [#{k}]: '#{v}'")
--]]

export join = (str_list, joiner=", ") ->
	if #str_list == 0
		return ""

	out = ""

	for k, str in ipairs(str_list)
		out ..= tostring(str)

		if next(str_list, k) != nil
			out ..= joiner
	
	out

export rep = (str, n=1) ->
	floor = math.floor n
	rest  = n - floor

	out = string.rep(str, floor)

	if rest > 0
		for i = 1, math.floor rest * length(str)
			out ..= str::sub(i, i)

	out

export pad_left = (str, len, char=" ") ->
	str .. rep(char, len)

export pad_right = (str, len, char=" ") ->
	rep(char, len) .. str

export center = (str, width, prefix="", suffix="") ->
	str = str
		--|> strip()
		|> string.sub(1, width - 6)
		|> pad_left( (width / 2) - (length(str) / 2) - prefix)
		|> pad_right((width / 2) - (length(str) / 2) - suffix)

	str

export align = (str, block_width, align="center", char=" ", str_length, char_length) ->
	str = str::sub(1, block_width)
	str_length ??= length(str)
	char_length ??= length(char)
	char_count = (block_width - str_length) / char_length

	if align == "left"
		str .. rep(char, char_count)
	elseif align == "center"
		spacing_length = (char_count) / 2
		rep(char, math.floor(spacing_length)) .. str .. rep(char, math.ceil(spacing_length))
	elseif align == "right"
		rep(char, char_count) .. str

export shell_escape = (str) ->
	str::gsub([[']], [['"'"']])

export is_nil_or_empty = (str) ->
	(str == nil) or (str == "")
