import "awful"
import "gears"
import "wibox"
import "ruled"
import "beautiful"
import "menubar"
import "naughty"

import "yue"

import "lgi"
gtk = lgi.require("Gtk", "3.0")

import "slimeos.lib.util.tts"
tts_monochrome = require("slimeos.lib.util.tts_monochrome")

import MissingArgumentException, MissingParameterException from require("slimeos.lib.exception")

getmetatable = getmetatable
setmetatable = setmetatable
io = io
pcall = pcall
tostring = tostring

unpack = unpack or table.unpack

--[[
export create_module = (name) ->
	MissingParameterException::assert(name, 1, "util.create_module", "name")
	
	module = {
		__meta: {
			__name: name
		}
		__tostring: (module) ->
			memory_address = module.raw_tostring(module)::match(".*: (0x%x*)")

			("<module '%s'%s>")::format(
				module.__name,
				(memory_address != nil) and " at " .. memory_address or ""
			)
	}

	module.__index = module
	module.__meta.__index = module.__meta

	setmetatable(module, module.__meta)
--]]

export string   = require("slimeos.lib.util.string")
export terminal = require("slimeos.lib.util.terminal")

export notify = (msg, timeout) ->
	naughty.notification {
		timeout: timeout ?? 5
		message: tostring(msg)
	}

export pretty_print = (value) -> tts.prettify(value)

export pretty_print_monochrome = (value) -> tts_monochrome.prettify(value)

export unpack = unpack or table.unpack

export apcall = (fn, ...) ->
	args = { ... }
	xpcall(
		(() -> fn(unpack(args))),
		(msg) ->
			naughty.notification {
				message: "ERROR: #{msg}\n#{yue.traceback(2)}"
				urgency: "critical"
				timeout: 0
			}
	)

export lookup_icon = (icon_name) ->
	if not icon_name
		return

	gtk
		.IconTheme
		.get_default()?
		::lookup_icon(icon_name, 48, 0)?
		::get_filename()

export lookup_gicon = (gicon) ->
	if not gicon
		return

	gtk
		.IconTheme
		.get_default()?
		::lookup_by_gicon(gicon, 48, 0)?
		::get_filename()

scaling_factor = 1
dpi = beautiful.xresources.apply_dpi
export scale = (x, s=screen.primary) -> scaling_factor * dpi x * (s.scaling_factor or 1)

export for_children = (widget, id, callback) ->
	for _, child in ipairs widget::get_children_by_id id
		callback child

export is_private = (key) -> not not (type(key) == "string" and key::match("^__"))

export quote_key = (key, monochrome) ->
	if type(key) == "string" and key::match("^[a-zA-Z_][a-zA-Z0-9_]*$")
		key
	elseif monochrome
		"[#{pretty_print_monochrome(key)}]"
	else
		"[#{pretty_print(key)}]"

make_getter = (field) => () -> rawget(@__private, field)

make_setter = (field, signal) =>
	if (signal) and (@emit_signal != nil)
		(value) ->
			@emit_signal(signal, value)
			rawset(@__private, field, value)
	else
		(value) -> rawset(@__private, field, value)

export gen_properties = (args) ->
	with args
		.object ??= args[1]
		MissingArgumentException::assert(.object, "object", "util.gen_properties")
		.properties ??= args[2]
		MissingArgumentException::assert(.properties, "properties", "util.gen_properties")
		.get ??= true
		.set ??= true
		.raw ??= true
		.signals ??= false

	if args.raw
		if args.get
			for prop in *args.properties
				rawset(args.object, ("get_"..prop), make_getter(args.object, prop))

		if args.set
			for prop in *args.properties
				rawset(args.object, ("set_"..prop), make_setter(args.object, prop, (args.signals and "property::#{field}" or nil)))
		
		return

	if args.get
		for prop in *args.properties
			args.object["get_"..prop] = make_getter(args.object, prop)

	if args.set
		for prop in *args.properties
			args.object["set_"..prop] = make_setter(args.object, prop, (args.signals and "property::#{field}" or nil))

export raw_tostring = (obj) ->
	mt = getmetatable(obj)

	if mt == nil
		return tostring(obj)

	setmetatable(obj, nil)

	obj_str = tostring(obj)

	setmetatable(obj, mt)

	obj_str

export protected_open = (path, mode, callback) ->
	success, file = pcall(io.open, path, mode)

	if not file
		print("An error occured while trying to open '#{path}'!")
		return

	if not success
		print("An error occured while trying to open '#{path}'!")
		file::close()
		return

	try
		callback(file)
	catch err
		print("An error occured while trying to run the callback:\n -> #{err}")

	file::close()

export clamp = (value, min, max) ->
	if value <= min
		return min

	if value >= max
		return max
	
	value

export smart_insert = (tb, value, index) ->
	-- TODO: This is unnecessary, because `table.insert()` can also move items
	if index == nil
		tb[] = value
	elseif tb[index] == nil
		tb[index] = value
	else
		for i = #tb, index, -1
			tb[i + 1] = tb[i]

		tb[index] = value

	tb

export after_timeout = (timeout, callback) ->
	gears.timer {
		timeout: timeout,
		autostart: true
		single_shot: true
		callback: callback
	}

export clamp = (value, floor, ceiling) ->
	if value < floor
		floor
	elseif value > ceiling
		ceiling
	else
		value

export shape = (s, ...) ->
	args = { ... }
	(cr, w, h) ->
		s(cr, w, h, unpack(args))
