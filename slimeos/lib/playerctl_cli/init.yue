if __PLAYERCTL_SIGNALS_ALREADY_CREATED
	return () ->

require = require
os = os
getmetatable = getmetatable
setmetatable = setmetatable
type = type
tostring = tostring
tonumber = tonumber
pairs = pairs
ipairs = ipairs
print = print

awesome = awesome

import "awful"
import "gears"
import "slimeos.lib.util"

import "lgi"
import cairo, Playerctl from lgi

cache_dir = ""
XDG_CACHE_HOME = os.getenv("XDG_CACHE_HOME")
HOME = os.getenv("HOME")

cache_dir = if XDG_CACHE_HOME and (XDG_CACHE_HOME != "")
	XDG_CACHE_HOME .. "/awesome"
else
	HOME .. "/.cache/awesome"

awful.spawn { "mkdir", "-p", cache_dir }

playerctl_fmt = "{{album}}\t{{mpris:artUrl}}\t{{artist}}\t{{mpris:length}}\t{{playerName}}\t{{position}}\t{{status}}\t{{title}}\t{{volume}}"

--current_player

art_path = cache_dir .. "/coverart"
converted_art_path = art_path .. ".png"
safe_art_path = util.string.shell_escape(art_path)--::gsub("%%", "%%%%")
art_script_fmt = "curl -o '#{safe_art_path}' -fsSL -- '%s'\n\nffmpeg -y -i '#{safe_art_path}' -vf " .. [["crop=w='min(min(iw\,ih)\,500)':h='min(min(iw\,ih)\,500)',scale=500:500,setsar=1"]] .. " -vframes 1 '#{safe_art_path}.png'"

download_cover_art = do
	local previous_cover_art_url

	(url, callback) ->
		if url == previous_cover_art_url
			callback(converted_art_path)
			return

		previous_cover_art_url = url

		safe_url = util.string.shell_escape(url)

		awful.spawn.easy_async({ "curl", "-o", art_path, "-fsSL", "--", url }, (stdout, stderr, reason, exit_code) ->
			if exit_code > 0
				print("\027[31;1mAn error occoured while downloading the cover art:\027[0m\n -> #{stderr}")
				callback(converted_art_path)
				return

			stdout, stderr, reason, exit_code = nil, nil, nil, nil

			awful.spawn.easy_async({ "ffmpeg", "-y", "-i", art_path, "-vf", [[crop=w='min(min(iw\,ih)\,500)':h='min(min(iw\,ih)\,500)',scale=500:500,setsar=1]], "-vframes", "1", converted_art_path }, (stdout, stderr, reason, exit_code) ->
				if exit_code > 0
					print("\027[31;1mAn error occoured while converting the cover art:\027[0m\n -> #{stderr}")

				callback(converted_art_path)
			)
		)

is_playing_status_parser = (status_string) ->
	status = false

	if status_string == "Playing"
		status = true

	awesome.emit_signal("playerctl::metadata::playing", status)

	status

PlayerctlMetadata, PlayerctlMetadata_mt = {
	__name: "PlayerctlMetadata"
}, {
	fields: {
		"album"
		"art_cairo"
		"art_path"
		"art_url"
		"artist"
		"length"
		"player_name"
		"position"
		"status"
		"title"
		"volume"
	}
}
PlayerctlMetadata.__index = PlayerctlMetadata
PlayerctlMetadata_mt.__index = PlayerctlMetadata_mt
setmetatable(PlayerctlMetadata, PlayerctlMetadata_mt)

PlayerctlMetadata.same_song_as = (other) =>
	if not other
		return false

	if @artist != other.artist
		return false

	if @title != other.title
		return false

	return true

do
	quote = (value) ->
		tv = type(value)

		if tv == "string"
			'"' .. value .. '"'
		elseif tv == "number"
			("%.02f")::format(value)
		else
			tostring(value)

	PlayerctlMetadata.__tostring = () =>
		local outs
		local first = true

		for k, v in pairs(@)
			outs = if first then
				first = false
				@.__name .. " {\n    " .. k .. ": " .. quote(v)
			else
				outs     ..   "\n    " .. k .. ": " .. quote(v)

		return outs .. "\n}"

PlayerctlMetadata_mt.__call = (cls, o) ->
	setmetatable(o or {}, cls)

old_metadata = {}
send_metadata_signal = (line) ->
	if (not line) or (line == "")
		return

	tmp = util.string.split(line, "\t")

	metadata = PlayerctlMetadata {
		album:       tmp[1]
		art_url:     util.string.strip(tmp[2])
		artist:      tmp[3]
		length:      tonumber(tmp[4]) or 100
		player_name: tmp[5]
		position:    tonumber(tmp[6]) or 0
		playing:     is_playing_status_parser(tmp[7])
		title:       tmp[8]
		volume:      tonumber(tmp[9]) or 0
	}

	metadata.completion = metadata.position / (metadata.length / 100)

	if (not metadata.art_url) or (metadata.art_url == "") or (metadata.art_url == old_metadata.art_url)
		metadata.art_path = old_metadata.art_path
		metadata.art_cairo = old_metadata.art_cairo
	
		awesome.emit_signal("playerctl::metadata", metadata)
		old_metadata = metadata
		return

	download_cover_art(metadata.art_url, () ->
		metadata.art_path = converted_art_path
		metadata.art_cairo = cairo.ImageSurface.create_from_png(metadata.art_path)
		awesome.emit_signal("playerctl::metadata", metadata)
		old_metadata = metadata
	)

make_metadata_update_signal_listener = () ->
	gears.timer {
		timeout:   1
		autostart: true
		call_now:  true
		callback:  () ->
			awful.spawn.easy_async({
				"playerctl"
				"metadata"
				-- "-p"
				-- current_player
				"--format"
				playerctl_fmt
			}, (stdout, stderr, reason, exit_code) ->
				send_metadata_signal(stdout)
			)
	}

make_control_signal_listeners = () ->
	awesome.connect_signal("playerctl::play",       () -> awful.spawn { "playerctl", "play"       })
	awesome.connect_signal("playerctl::pause",      () -> awful.spawn { "playerctl", "pause"      })
	awesome.connect_signal("playerctl::play-pause", () -> awful.spawn { "playerctl", "play-pause" })
	awesome.connect_signal("playerctl::stop",       () -> awful.spawn { "playerctl", "stop"       })
	awesome.connect_signal("playerctl::next",       () -> awful.spawn { "playerctl", "next"       })
	awesome.connect_signal("playerctl::previous",   () -> awful.spawn { "playerctl", "previous"   })
	awesome.connect_signal("playerctl::volume",     () -> awful.spawn { "playerctl", "volume"     })

make_player_list_signal_listener = () ->
	gears.timer {
		timeout:   1
		autostart: true
		call_now:  true
		callback:  () ->
			--awesome.emit_signal("playerctl::available_players", Playerctl.list_players())
			awful.spawn.easy_async({ "playerctl", "--list-all" }, (stdout, stderr, reason, exit_code) ->
				if exit_code > 0
					return

				awesome.emit_signal("playerctl::available_players", util.string.split(stdout, "\n"))
			)
	}

previous_active_player = {}
awesome.connect_signal("playerctl::available_players", (player_list) ->
	--active_player = Playerctl.list_players()?[1]?.name
	active_player = player_list[1]

	if (not active_player) or (active_player == previous_active_player)
		return

	previous_active_player = active_player

	-- TODO: Allow to switch the currently displayed player manually

	awesome.emit_signal("playerctl::active_player", active_player)
)

make_metadata_update_signal_listener()
make_control_signal_listeners()
make_player_list_signal_listener()

global __PLAYERCTL_SIGNALS_ALREADY_CREATED = true
