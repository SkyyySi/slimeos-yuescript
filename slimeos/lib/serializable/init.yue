--- Usage example:
---
--- ```yuescript
--- import JSONSerializable from require("slimeos.lib.serializable")
--- 
--- my_data_store = JSONSerializable {
--- 	data: {
--- 		foo: "bar"
--- 		biz: "baz"
--- 		langs: { "lua", "moonscript", "yuescript", "fennel", "teal" }
--- 	}
--- 	path: "/tmp/test.json"
--- }
--- 
--- print("my_data_store.<tostring> = #{my_data_store}")
--- print("my_data_store::to_json() = #{my_data_store::to_json()}")
--- 
--- my_data_store::save((success) -> print("success = #{success}, data = #{my_data_store::to_json()}"))
--- 
--- -- Note: in the unlikely scenario that you actually want to `load()` right
--- -- after running `save()`, the thing you really want to do is to run the `load()`
--- -- nested inside of the callback passed to `save()`.
--- my_data_store::load((success) -> print("success = #{success}, data = #{my_data_store::to_json()}"))
--- ```
---
--- Or, if you would like to test this in a stand-alone Lua session:
---
--- ```lua
--- JSONSerializable = require("slimeos.lib.serializable").JSONSerializable
--- 
--- local my_data_store = JSONSerializable {
--- 	data = {
--- 		foo = "bar",
--- 		biz = "baz",
--- 		langs = { "lua", "moonscript", "yuescript", "fennel", "teal" },
--- 	},
--- 	path = "/tmp/test.json",
--- }
--- 
--- my_data_store:save(function(success)
--- 	--- Should print somehting like this:
--- 	--- success = true, data = {"biz":"baz","foo":"bar","langs":["lua","moonscript","yuescript","fennel","teal"]}
--- 	print(("success = %s, data = %s"):format(success, my_data_store:to_json()))
--- end)
--- 
--- require("lgi").GLib.MainLoop():run()
--- ```

print = print
error = error
tostring = tostring

import beautiful from require("awesome_std")

--- If you want to use `json.lua` by rxi instead, replace it with
--- import "json"
import "dkjson" as json

import "lgi"
import Gio, GLib from lgi

gio_async_start = Gio.Async.start

local *

unpack = unpack or table.unpack

export disable_error_catching = false

import notify from require("slimeos.lib.util")
import split from require("slimeos.lib.util.string")

import traceback from require("yue")

color_map = {
	"0": "</span></b>"
	"1": "<b>"
	"3": "<i>"
	"30": "<span foreground='#{beautiful.color.black}'>"
	"31": "<span foreground='#{beautiful.color.red}'>"
	"32": "<span foreground='#{beautiful.color.green}'>"
	"33": "<span foreground='#{beautiful.color.yellow}'>"
	"34": "<span foreground='#{beautiful.color.blue}'>"
	"35": "<span foreground='#{beautiful.color.magenta}'>"
	"36": "<span foreground='#{beautiful.color.cyan}'>"
	"37": "<span foreground='#{beautiful.color.white}'>"

	<index>: (key) => ""
}

parse_colors = (str) ->
	str::gsub("\027%[([^m]*)m", (match) ->
		table.concat([ color_map[substr] for substr in *split(match, ";") ])
	)

export log = {
	level: 0

	print: (msg) ->
		notify(
			parse_colors(msg), 0
		)

	get_caller_name: (offset=0) ->
		debug.getinfo(2 + offset).name

	debug: {
		method_call: () =>
			if log.level >= 4
				log.print("\027[1;35mDEBUG:\027[0m Called #{@@__name}.#{log.get_caller_name(1)}()")

		<call>: (_, msg) ->
			if log.level >= 4
				log.print("\027[1;35mDEBUG:\027[0m #{msg}")
	}

	info:  (msg) ->
		if log.level >= 3
			log.print("\027[1;34mINFO:\027[0m #{msg}")

	warn:  (msg) ->
		if log.level >= 2
			log.print("\027[1;33mWARNING:\027[0m #{msg}")

	error: (msg, err) ->
		if disable_error_catching
			error(msg)

		if log.level >= 1
			log.print("\027[1;31mERROR:\027[0m #{msg}\n#{traceback(err)}")
}

__read_file_async_impl = (file_path, callback) ->
	file = Gio.File.new_for_path(file_path)

	file::load_contents_async(nil, (file_, result) ->
		local contents

		success = try
			contents = file::load_contents_finish(result)
		catch err
			log.error("Something went wrong while trying to read from file '#{file_path}': " .. tostring(err))

		if type(contents) != "string"
			success = false

		if callback
			log.debug("Executing callback for `serializable.write_file_async()`-call")
			callback(success, contents)
	)

export read_file_async = (...) ->
	gio_async_start(__read_file_async_impl)(...)

__write_file_async_impl = (file_path, content, callback) ->
	file = Gio.File.new_for_path(file_path)

	file::replace_contents_bytes_async(
		GLib.Bytes(content),
		nil,
		false,
		Gio.FileCreateFlags.REPLACE_DESTINATION,
		nil,
		(file_, result) ->
			success = try
				file::replace_contents_finish(result)
			catch err
				log.error("Something went wrong while trying to write to file '#{file_path}'" .. tostring(err))

			if callback
				log.debug("Executing callback for `serializable.write_file_async()`-call")
				callback(success)
	)

export write_file_async = (...) ->
	gio_async_start(__write_file_async_impl)(...)

export class JSONSerializable
	new: (kwargs={}) =>
		log.debug("Created new #{@@__name}-object")
		@data = kwargs.data ?? {}
		@path = kwargs.path

	get: (key) =>
		log.debug.method_call(@)
		@data[key]

	set: (key, value) =>
		log.debug.method_call(@)
		@data[key] = value

		@

	to_json: () =>
		log.debug.method_call(@)
		json.encode(@data)

	<tostring>: (tb, depth) =>
		log.debug.method_call(@)
		@@__name .. "(" .. json.encode(@data, { indent: true }) .. ")"

	load: (callback, path) =>
		log.debug.method_call(@)
		path ??= @path

		if not path?
			log.error("Attemted to load data from file, but neither was a path provided nor was @path set.")

		read_file_async(path, (success, content) ->
			if success
				log.info("The reading from '#{path}' was successful")
				@data = json.decode(content) ?? {}
			else
				log.error("Something went wrong while trying to load from '#{path}'")

			log.debug("Executing callback for #{@@__name}.load()")
			callback(success)
		)

		@

	load_blocking: (path) =>
		log.debug.method_call(@)
		path ??= @path

		if not path?
			log.error("Attemted to load data from file, but neither was a path provided nor was @path set.")

		f, err = io.open(path, "r")

		if not f
			f2, err2 = io.open(path, "w")

			if not f2
				log.error("Something went wrong while trying to open '#{path}'", err2)
				return

			f2::write("")
			f2::close()

			f, err = io.open(path, "r")

		if not f
			log.error("Something went wrong while trying to open '#{path}'", err)
			return

		log.info("The opening of '#{path}' was successful")

		content = f::read("*a")

		log.info("The reading from '#{path}' was successful")

		@data = json.decode(content) ?? {}

		@

	save: (callback, path) =>
		log.debug.method_call(@)
		path ??= @path

		if not path?
			log.error("Attemted to save data to file, but neither was a path provided nor was @path set.")

		write_file_async(path, @to_json(), (success) ->
			if success
				log.info("The saving to '#{path}' was successful")
			else
				log.error("Something went wrong while trying to save to '#{path}'")

			log.debug("Executing callback for #{@@__name}.save()")
			callback(success)
		)

		@

	save_blocking: (path) =>
		log.debug.method_call(@)
		path ??= @path

		if not path?
			log.error("Attemted to load data from file, but neither was a path provided nor was @path set.")

		f, err = io.open(path, "w")

		if not f
			log.error("Something went wrong while trying to open '#{path}'", err)
			return

		log.info("The opening of '#{path}' was successful")

		f::write(@to_json())

		log.info("The reading from '#{path}' was successful")

		@
