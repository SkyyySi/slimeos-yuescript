import "awful"
import "gears"
import "wibox"
import "ruled"
import "menubar"
import "naughty"

import "slimeos.lib.util"
import scale from util

import "beautiful.theme_assets"

theme_path = gears.filesystem.get_configuration_dir() .. "themes/skyyysi/"

t = {}

t.apply_font_size = (font, size) ->
	"#{font} #{math.floor(size + 0.5)}"

t.base_font = "Source Sans Pro"
t.font_size = scale(12)
t.font = t.apply_font_size(t.base_font, t.font_size)
t.base_monospace_font = "MesloLGS NF"
t.monospace_font = t.apply_font_size(t.base_monospace_font, t.font_size)

t.color = {
	black:   "#0E1019", black_alternate:   "#131522"
	grey:    "#232323", grey_alternate:    "#444444"
	red:     "#FF000F", red_alternate:     "#FF2740"
	green:   "#8CE10b", green_alternate:   "#ABE15B"
	yellow:  "#FFB900", yellow_alternate:  "#FFD242"
	blue:    "#008DF8", blue_alternate:    "#0092FF"
	magenta: "#6D43A6", magenta_alternate: "#9A5FEB"
	cyan:    "#00D8EB", cyan_alternate:    "#67FFF0"
	white:   "#FFFAF4", white_alternate:   "#FFFFFF"
}

with t
	.bg_normal     = .color.black
	.bg_alternate  = .color.black_alternate
	.bg_focus      = .color.blue
	.bg_urgent     = .color.red
	.bg_minimize   = .color.grey_alternate
	.bg_systray    = .bg_normal

	.fg_normal     = .color.white
	.fg_focus      = .color.white_alternate
	.fg_urgent     = .color.white_alternate
	.fg_minimize   = .color.white_alternate

	.useless_gap         = scale(2)
	.border_width        = scale(1)
	.border_color_normal = .bg_normal
	.border_color_active = .bg_focus
	.border_color_marked = .color.yellow -- "#FFFFB9FF0000"

	.button_bg_normal   = .bg_alternate ?? "#131522"
	.button_bg_active   = "#1D2034"
	.button_bg_selected = "#252941"
	.button_bg_press    = "#303654"

	.titlebar_bg_normal  = .color.black
	.titlebar_bg_focus  = .color.black_alternate
	.titlebar_fg_normal = "#dedede"
	.titlebar_fg_focus = .fg_normal

	.lyricsbox_fg_normal = "#dedede"
	.lyricsbox_fg_focus = .fg_normal

-- There are other variable sets
-- overriding the default one when
-- defined, the sets are:
-- taglist_[bg|fg]_[focus|urgent|occupied|empty|volatile]
-- tasklist_[bg|fg]_[focus|urgent]
-- titlebar_[bg|fg]_[normal|focus]
-- tooltip_[font|opacity|fg_color|bg_color|border_width|border_color]
-- prompt_[fg|bg|fg_cursor|bg_cursor|font]
-- hotkeys_[bg|fg|border_width|border_color|shape|opacity|modifiers_fg|label_bg|label_fg|group_margin|font|description_font]
-- Example:
--theme.taglist_bg_focus = "#ff0000"

--focus, urgent, occupied, empty, volatile
t.taglist_bg_focus = t.bg_focus
t.taglist_bg_urgent = t.bg_urgent
t.taglist_bg_occupied = t.bg_minimize
t.taglist_bg_empty = t.bg_normal
t.taglist_bg_volatile = t.border_color_marked
t.taglist_font = "Roboto Mono, Bold #{math.floor(scale(12))}"

-- Generate taglist squares:
taglist_square_size = 0 -- scale(4)
t.taglist_squares_sel = theme_assets.taglist_squares_sel(
    taglist_square_size, t.fg_normal
)
t.taglist_squares_unsel = theme_assets.taglist_squares_unsel(
    taglist_square_size, t.fg_normal
)

-- Variables set for theming notifications:
-- notification_font
-- notification_[bg|fg]
-- notification_[width|height|margin]
-- notification_[border_color|border_width|shape|opacity]

-- Variables set for theming the menu:
-- menu_[bg|fg]_[normal|focus]
-- menu_[border_color|border_width]
--t.menu_submenu_icon = load_icon("submenu.png")
t.menu_height = scale( 25)
t.menu_width  = scale(200)

-- You can add as many variables as
-- you wish and access them by using
-- beautiful.variable in your rc.lua
--theme.bg_widget = "#cc0000"

t.icon_color_focus = t.fg_focus or "#ffffff"
t.icon_color_normal = t.fg_normal or "#dedede"
load_icon = (path, unfocused) ->
	gears.color.recolor_image(theme_path .. path, unfocused and t.icon_color_normal or t.icon_color_focus)

t.window_control_icon_padding = scale(64)
add_padding = (image, padding=t.window_control_icon_padding) ->
	res = image

	try
		w = wibox.widget {
			nil
			{
				{
					image:  image
					halign: "center"
					valign: "center"
					widget: wibox.widget.imagebox
				}
				margins: padding
				widget:  wibox.container.margin
			}
			layout: wibox.layout.align.horizontal
		}

		res = wibox.widget.draw_to_image_surface(w, 256, 256)

		--util.notify(res, 0)
	catch err
		util.notify(err, 0)

	res

with t
	--[[
	.titlebar_close_button_normal = load_icon("titlebar/close_normal.png")
	.titlebar_close_button_focus  = load_icon("titlebar/close_focus.png")

	.titlebar_minimize_button_normal = load_icon("titlebar/minimize_normal.png")
	.titlebar_minimize_button_focus  = load_icon("titlebar/minimize_focus.png")

	.titlebar_maximized_button_normal_inactive = load_icon("titlebar/maximized_normal_inactive.png")
	.titlebar_maximized_button_focus_inactive  = load_icon("titlebar/maximized_focus_inactive.png")
	.titlebar_maximized_button_normal_active   = load_icon("titlebar/maximized_normal_active.png")
	.titlebar_maximized_button_focus_active    = load_icon("titlebar/maximized_focus_active.png")

	.titlebar_ontop_button_normal_inactive = load_icon("titlebar/ontop_normal_inactive.png")
	.titlebar_ontop_button_focus_inactive  = load_icon("titlebar/ontop_focus_inactive.png")
	.titlebar_ontop_button_normal_active   = load_icon("titlebar/ontop_normal_active.png")
	.titlebar_ontop_button_focus_active    = load_icon("titlebar/ontop_focus_active.png")
	--]]
	.titlebar_close_button_normal = add_padding load_icon("icons/window-controls/close.png", true)
	.titlebar_close_button_focus  = add_padding load_icon("icons/window-controls/close.png", false)

	.titlebar_minimize_button_normal = add_padding load_icon("icons/window-controls/minimize.png", true)
	.titlebar_minimize_button_focus  = add_padding load_icon("icons/window-controls/minimize.png", false)

	.titlebar_maximized_button_normal_inactive = add_padding load_icon("icons/window-controls/maximize.png", true)
	.titlebar_maximized_button_focus_inactive  = add_padding load_icon("icons/window-controls/maximize.png", false)
	.titlebar_maximized_button_normal_active   = add_padding load_icon("icons/window-controls/restore.png", true)
	.titlebar_maximized_button_focus_active    = add_padding load_icon("icons/window-controls/restore.png", false)

	.titlebar_ontop_button_normal_inactive = load_icon("titlebar/ontop_normal_inactive.png", true)
	.titlebar_ontop_button_focus_inactive  = load_icon("titlebar/ontop_focus_inactive.png", false)
	.titlebar_ontop_button_normal_active   = load_icon("titlebar/ontop_normal_active.png", true)
	.titlebar_ontop_button_focus_active    = load_icon("titlebar/ontop_focus_active.png", false)

	.titlebar_sticky_button_normal_inactive = load_icon("titlebar/sticky_normal_inactive.png", true)
	.titlebar_sticky_button_focus_inactive  = load_icon("titlebar/sticky_focus_inactive.png", false)
	.titlebar_sticky_button_normal_active   = load_icon("titlebar/sticky_normal_active.png", true)
	.titlebar_sticky_button_focus_active    = load_icon("titlebar/sticky_focus_active.png", false)

	.titlebar_floating_button_normal_inactive = load_icon("titlebar/floating_normal_inactive.png", true)
	.titlebar_floating_button_focus_inactive  = load_icon("titlebar/floating_focus_inactive.png", false)
	.titlebar_floating_button_normal_active   = load_icon("titlebar/floating_normal_active.png", true)
	.titlebar_floating_button_focus_active    = load_icon("titlebar/floating_focus_active.png", false)

	.wallpaper = theme_path .. "background.jpg"

	-- You can use your own layout icons like this:
	.layout_fairh      = load_icon("layouts/fairhw.png")
	.layout_fairv      = load_icon("layouts/fairvw.png")
	.layout_floating   = load_icon("layouts/floatingw.png")
	.layout_magnifier  = load_icon("layouts/magnifierw.png")
	.layout_max        = load_icon("layouts/maxw.png")
	.layout_fullscreen = load_icon("layouts/fullscreenw.png")
	.layout_tilebottom = load_icon("layouts/tilebottomw.png")
	.layout_tileleft   = load_icon("layouts/tileleftw.png")
	.layout_tile       = load_icon("layouts/tilew.png")
	.layout_tiletop    = load_icon("layouts/tiletopw.png")
	.layout_spiral     = load_icon("layouts/spiralw.png")
	.layout_dwindle    = load_icon("layouts/dwindlew.png")
	.layout_cornernw   = load_icon("layouts/cornernww.png")
	.layout_cornerne   = load_icon("layouts/cornernew.png")
	.layout_cornersw   = load_icon("layouts/cornersww.png")
	.layout_cornerse   = load_icon("layouts/cornersew.png")

-- Generate Awesome icon:
t.awesome_icon = theme_assets.awesome_icon(
    scale(64), t.bg_focus, t.fg_focus
)

-- Fix blurry tasklist icons
awesome.set_preferred_icon_size(128)

-- Define the icon theme for application icons. If not set then the icons
-- from /usr/share/icons and /usr/share/icons/hicolor will be used.
--t.icon_theme = "Papirus-Dark"
t.icon_theme = "Tela-circle-dark"

-- Set different colors for urgent notifications.
ruled.notification.connect_signal("request::rules", () ->
    ruled.notification.append_rule {
        rule: {
			urgency: "critical"
		}
        properties: {
			bg: "#ff0000"
			fg: "#ffffff"
		}
	}
)

t.icons = {
	<>: {
		__index: (key) =>
			icon = gears.color.recolor_image((theme_path .. "/icons/yandex-ui-icons/#{key}.svg"), t.fg_normal)

			--- Cache the icon for later re-uses
			@[key] = icon

			icon
	}
}

t
